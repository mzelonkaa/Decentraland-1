{"version":3,"file":"eth-connect.js","sources":["../src/providers/common.ts","../node_modules/fp-future/index.js","../node_modules/bignumber.js/bignumber.js","../node_modules/utf8/utf8.js","../node_modules/rollup-plugin-node-globals/src/global.js","../node_modules/process-es6/browser.js","../node_modules/js-sha3/src/sha3.js","../src/utils/utils.ts","../src/Schema.ts","../src/utils/BigNumber.ts","../src/utils/jsonrpc.ts","../src/utils/config.ts","../src/utils/formatters.ts","../src/Method.ts","../src/utils/errors.ts","../src/Property.ts","../src/methods/eth.ts","../src/utils/sleep.ts","../src/RequestManager.ts","../src/solidity/param.ts","../src/solidity/formatters.ts","../src/solidity/type.ts","../src/solidity/coder.ts","../src/solidity/address.ts","../src/solidity/bool.ts","../src/solidity/int.ts","../src/solidity/uint.ts","../src/solidity/dynamicbytes.ts","../src/solidity/bytes.ts","../src/solidity/string.ts","../src/solidity/real.ts","../src/solidity/ureal.ts","../src/SolidityFunction.ts","../src/Filter.ts","../src/SolidityEvent.ts","../src/AllSolidityEvents.ts","../src/Contract.ts","../src/ContractFactory.ts","../src/providers/HTTPProvider.ts","../src/providers/WebSocketProvider.ts"],"sourcesContent":["export type Callback = (err: Error | null, message?: any) => void\n\nexport type RPCMessage = {\n  jsonrpc: '2.0'\n  id: number\n  method: string\n  params: any[] | { [key: string]: any }\n}\n\nexport function toRPC(message: RPCMessage): RPCMessage {\n  message.jsonrpc = '2.0'\n\n  if (!message.id || typeof message.id !== 'number' || Math.floor(message.id) !== message.id) {\n    throw new Error(`Invalid RPC message(invalid id) message: ${JSON.stringify(message)}`)\n  }\n\n  if (!message.method || typeof message.method !== 'string' || message.method.trim().length === 0) {\n    throw new Error(`Invalid RPC message(invalid method) message: ${JSON.stringify(message)}`)\n  }\n\n  if (!message.params || typeof message.params !== 'object') {\n    throw new Error(`Invalid RPC message(invalid params) message: ${JSON.stringify(message)}`)\n  }\n  return message\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction future() {\n    let resolver;\n    let rejecter;\n    const promise = new Promise((ok, err) => {\n        resolver = (x) => {\n            ok(x);\n            promise.isPending = false;\n        };\n        rejecter = (x) => {\n            err(x);\n            promise.isPending = false;\n        };\n    }).catch(e => Promise.reject(e));\n    promise.resolve = resolver;\n    promise.reject = rejecter;\n    if (!(\"finally\" in promise)) {\n        promise.finally = fn => {\n            promise.then(fn);\n            promise.catch(fn);\n        };\n    }\n    promise.isPending = true;\n    return promise;\n}\nexports.future = future;\nexports.default = future;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BLFNBQWdCLE1BQU07SUFDcEIsSUFBSSxRQUF3QixDQUFDO0lBQzdCLElBQUksUUFBNEIsQ0FBQztJQUVqQyxNQUFNLE9BQU8sR0FBUSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUMzQyxRQUFRLEdBQUcsQ0FBQyxDQUFJLEVBQUUsRUFBRTtZQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDLENBQUM7UUFDRixRQUFRLEdBQUcsQ0FBQyxDQUFRLEVBQUUsRUFBRTtZQUN0QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDUCxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakMsT0FBTyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7SUFDM0IsT0FBTyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFFMUIsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQztLQUNIO0lBRUQsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFFekIsT0FBTyxPQUFxQixDQUFDO0FBQy9CLENBQUM7QUE1QkQsd0JBNEJDO0FBRUQsa0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgSUZ1dHVyZTxUPiA9IFByb21pc2U8VD4gJiB7XG4gIHJlc29sdmU6ICh4OiBUKSA9PiB2b2lkO1xuICByZWplY3Q6ICh4OiBFcnJvcikgPT4gdm9pZDtcbiAgZmluYWxseTogKGZuOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuICBpc1BlbmRpbmc6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZnV0dXJlPFQgPSBhbnk+KCk6IElGdXR1cmU8VD4ge1xuICBsZXQgcmVzb2x2ZXI6ICh4OiBUKSA9PiB2b2lkO1xuICBsZXQgcmVqZWN0ZXI6ICh4OiBFcnJvcikgPT4gdm9pZDtcblxuICBjb25zdCBwcm9taXNlOiBhbnkgPSBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgIHJlc29sdmVyID0gKHg6IFQpID0+IHtcbiAgICAgIG9rKHgpO1xuICAgICAgcHJvbWlzZS5pc1BlbmRpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJlamVjdGVyID0gKHg6IEVycm9yKSA9PiB7XG4gICAgICBlcnIoeCk7XG4gICAgICBwcm9taXNlLmlzUGVuZGluZyA9IGZhbHNlO1xuICAgIH07XG4gIH0pLmNhdGNoKGUgPT4gUHJvbWlzZS5yZWplY3QoZSkpO1xuXG4gIHByb21pc2UucmVzb2x2ZSA9IHJlc29sdmVyO1xuICBwcm9taXNlLnJlamVjdCA9IHJlamVjdGVyO1xuXG4gIGlmICghKFwiZmluYWxseVwiIGluIHByb21pc2UpKSB7XG4gICAgcHJvbWlzZS5maW5hbGx5ID0gZm4gPT4ge1xuICAgICAgcHJvbWlzZS50aGVuKGZuKTtcbiAgICAgIHByb21pc2UuY2F0Y2goZm4pO1xuICAgIH07XG4gIH1cblxuICBwcm9taXNlLmlzUGVuZGluZyA9IHRydWU7XG5cbiAgcmV0dXJuIHByb21pc2UgYXMgSUZ1dHVyZTxUPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnV0dXJlO1xuIl19",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*! https://mths.be/utf8js v3.0.0 by @mathias */\n;(function(root) {\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tthrow Error(\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t' is not a scalar value'\n\t\t\t);\n\t\t}\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tcheckScalarValue(codePoint);\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\tcheckScalarValue(codePoint);\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\troot.version = '3.0.0';\n\troot.encode = utf8encode;\n\troot.decode = utf8decode;\n\n}(typeof exports === 'undefined' ? this.utf8 = {} : exports));\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nexport function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nexport var title = 'browser';\nexport var platform = 'browser';\nexport var browser = true;\nexport var env = {};\nexport var argv = [];\nexport var version = ''; // empty string to avoid regexp issues\nexport var versions = {};\nexport var release = {};\nexport var config = {};\n\nfunction noop() {}\n\nexport var on = noop;\nexport var addListener = noop;\nexport var once = noop;\nexport var off = noop;\nexport var removeListener = noop;\nexport var removeAllListeners = noop;\nexport var emit = noop;\n\nexport function binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nexport function cwd () { return '/' }\nexport function chdir (dir) {\n    throw new Error('process.chdir is not supported');\n};\nexport function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nexport function hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nexport function uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nexport default {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport BigNumber from 'bignumber.js'\n\nimport * as utf8 from 'utf8'\nimport { keccak256 } from 'js-sha3'\n\n/**\n * @public\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex != 'string') throw new Error('hexToBytes only accept strings, got: ' + typeof hex)\n\n  if (hex.substr(0, 2) === '0x') {\n    return hexToBytes(hex.substr(2))\n  }\n\n  const result = new Uint8Array(Math.ceil(hex.length / 2))\n\n  let i = 0\n  for (let char = 0; char < hex.length; char += 2) {\n    const n = parseInt(hex.substr(char, 2), 16)\n    if (isNaN(n)) throw new Error('Cannot read hex string:' + JSON.stringify(hex))\n    result[i] = parseInt(hex.substr(char, 2), 16)\n    i++\n  }\n\n  return result\n}\n\n/**\n * @public\n */\nexport function sha3(value: string | number[] | ArrayBuffer | Uint8Array, options?: { encoding?: 'hex' }): string {\n  if (typeof value == 'string') {\n    if (options && options.encoding === 'hex' && typeof value == 'string') {\n      let mutValue = value\n      if (mutValue.length > 2 && mutValue.substr(0, 2) === '0x') {\n        mutValue = mutValue.substr(2)\n      }\n      const t = hexToBytes(mutValue)\n      return keccak256(t)\n    } else {\n      return keccak256(utf8.encode(value))\n    }\n  }\n\n  return keccak256(value)\n}\n\nlet unitMap = {\n  noether: '0',\n  wei: '1',\n  kwei: '1000',\n  Kwei: '1000',\n  babbage: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  Mwei: '1000000',\n  lovelace: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  Gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000',\n}\n\n/**\n * @public\n * Should be called to pad string to expected length\n */\nexport function padLeft(str: string, chars: number, sign?: string) {\n  return new Array(chars - str.length + 1).join(sign ? sign : '0') + str\n}\n\n/**\n * @public\n * Should be called to pad string to expected length\n */\nexport function padRight(str: string, chars: number, sign?: string) {\n  return str + new Array(chars - str.length + 1).join(sign ? sign : '0')\n}\n\n/**\n * @public\n * Should be called to get utf8 from it's hex representation\n */\nexport function toUtf8(hex: string): string {\n  // Find termination\n  let str = ''\n  let i = 0\n  let l = hex.length\n  if (hex.substring(0, 2) === '0x') {\n    i = 2\n  }\n  for (; i < l; i += 2) {\n    let code = parseInt(hex.substr(i, 2), 16)\n    if (code === 0) break\n    str += String.fromCharCode(code)\n  }\n\n  return utf8.decode(str)\n}\n\n/**\n * @public\n * Should be called to get ascii from it's hex representation\n */\nexport function toAscii(hex: string) {\n  // Find termination\n  let str = ''\n  let i = 0\n  let l = hex.length\n  if (hex.substring(0, 2) === '0x') {\n    i = 2\n  }\n  for (; i < l; i += 2) {\n    let code = parseInt(hex.substr(i, 2), 16)\n    str += String.fromCharCode(code)\n  }\n\n  return str\n}\n\n/**\n * @public\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n */\nexport function fromUtf8(_str: string, allowZero = false) {\n  let str = utf8.encode(_str)\n  let hex = ''\n\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i)\n    if (code === 0) {\n      if (allowZero) {\n        hex += '00'\n      } else {\n        break\n      }\n    } else {\n      let n = code.toString(16)\n      hex += n.length < 2 ? '0' + n : n\n    }\n  }\n\n  return '0x' + hex\n}\n\n/**\n * @public\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n */\nexport function fromAscii(str: string, num: number = 0) {\n  let hex = ''\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i)\n    let n = code.toString(16)\n    hex += n.length < 2 ? '0' + n : n\n  }\n\n  return '0x' + hex.padEnd(num, '0')\n}\n\n/**\n * @public\n * Should be used to create full function/event name from json abi\n */\nexport function transformToFullName(json: { name: string; inputs: any[] }) {\n  if (json.name.indexOf('(') !== -1) {\n    return json.name\n  }\n\n  let typeName = json.inputs\n    .map(function (i) {\n      return i.type\n    })\n    .join()\n  return json.name + '(' + typeName + ')'\n}\n\n/**\n * @public\n * Should be called to get display name of contract function\n */\nexport function extractDisplayName(name: string) {\n  let stBracket = name.indexOf('(')\n  let endBracket = name.indexOf(')')\n  return stBracket !== -1 && endBracket !== -1 ? name.substr(0, stBracket) : name\n}\n\n/**\n * @public\n * Should be called to get type name of contract function\n */\nexport function extractTypeName(name: string) {\n  let stBracket = name.indexOf('(')\n  let endBracket = name.indexOf(')')\n  return stBracket !== -1 && endBracket !== -1\n    ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '')\n    : ''\n}\n\n/**\n * @public\n * Converts value to it's decimal representation in string\n */\nexport function isHex(value: string) {\n  if (typeof value === 'string') {\n    return /^0x[0-9a-fA-F]+$/.test(value)\n  } else return false\n}\n\n/**\n * @public\n * Converts value to it's decimal representation in string\n */\nexport function toNullDecimal(value: number | string | BigNumber) {\n  if (value === undefined || value === null) return value\n  return toBigNumber(value).toNumber()\n}\n\n/**\n * @public\n * Converts value to it's decimal representation in string\n */\nexport function toDecimal(value: number | string | BigNumber) {\n  return toBigNumber(value).toNumber()\n}\n\n/**\n * @public\n * Converts value to string\n */\nexport function toString(value: number | string | BigNumber) {\n  if (isBigNumber(value)) return (value as BigNumber).toString(10)\n  return '' + value\n}\n\n/**\n * @public\n * Converts value to it's hex  representation in string\n */\nexport function toData(val: string | number | BigNumber) {\n  if (typeof val === 'string') {\n    if (!val.startsWith('0x') && /^[A-Za-z0-9]+$/.test(val)) {\n      return '0x' + val\n    }\n  }\n  return toHex(val)\n}\n\n/**\n * @public\n * Converts value to it's boolean representation (x != 0)\n */\nexport function toBoolean(value: number | string | BigNumber | boolean) {\n  if (typeof value === 'boolean') return value\n  return toBigNumber(value).toNumber() !== 0\n}\n\n/**\n * @public\n * Converts value to it's hex representation\n */\nexport function fromDecimal(value: string | number | BigNumber) {\n  let num = toBigNumber(value)\n  let result = num.toString(16)\n\n  return num.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result\n}\n\n/**\n * @public\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n */\nexport function toHex(val: string | number | BigNumber) {\n  /*jshint maxcomplexity: 8 */\n\n  if (isBoolean(val)) return fromDecimal(+val)\n\n  if (isBigNumber(val)) return fromDecimal(val)\n\n  if (typeof val === 'object') return fromUtf8(JSON.stringify(val))\n\n  // if its a negative number, pass it through fromDecimal\n  if (isString(val)) {\n    const valStr = val as string\n    if (valStr.indexOf('-0x') === 0) return fromDecimal(valStr)\n    else if (valStr.indexOf('0x') === 0) return valStr\n    else if (!isFinite(valStr as any)) return fromUtf8(valStr, true)\n  }\n\n  return fromDecimal(val)\n}\n\n/**\n * @public\n * Returns value of unit in Wei\n */\nexport function getValueOfUnit(_unit: string): BigNumber {\n  let unit = _unit ? _unit.toLowerCase() : 'ether'\n  let unitValue = unitMap[unit]\n  if (unitValue === undefined) {\n    throw new Error(\n      \"This unit doesn't exists, please use the one of the following units\" + JSON.stringify(unitMap, null, 2)\n    )\n  }\n  return new BigNumber(unitValue, 10)\n}\n\n/**\n * @public\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n */\nexport function fromWei(num: number | string, unit: string) {\n  let returnValue = toBigNumber(num).dividedBy(getValueOfUnit(unit))\n\n  return isBigNumber(num) ? returnValue : returnValue.toString(10)\n}\n\n/**\n * @public\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n */\nexport function toWei(num: number | string, unit: string) {\n  let returnValue = toBigNumber(num).times(getValueOfUnit(unit))\n\n  return isBigNumber(num) ? returnValue : returnValue.toString(10)\n}\n\n/**\n * @public\n * Takes an input and transforms it into an bignumber\n */\nexport function toBigNumber(_num: number | string | BigNumber): BigNumber {\n  let num: any = _num || 0\n\n  if (isBigNumber(num)) {\n    return num as BigNumber\n  }\n\n  if (typeof num === 'string' && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n    return new BigNumber(num.replace('0x', ''), 16)\n  }\n\n  return new BigNumber(num.toString(10), 10)\n}\n\n/**\n * @public\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n */\nexport function toTwosComplement(num: number | string | BigNumber): BigNumber {\n  let bigNumber = toBigNumber(num).integerValue() as BigNumber\n\n  if (bigNumber.isLessThan(0)) {\n    return new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16).plus(bigNumber).plus(1)\n  }\n\n  return bigNumber\n}\n\n/**\n * @public\n * Checks if the given string is strictly an address\n */\nexport function isStrictAddress(address: any) {\n  return /^0x[0-9a-f]{40}$/i.test(address)\n}\n\n/**\n * @public\n * Checks if the given string is an address\n */\nexport function isAddress(address: any) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    // check if it has the basic requirements of an address\n    return false\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    // If it's all small caps or all all caps, return true\n    return true\n  } else {\n    // Otherwise check each case\n    return isChecksumAddress(address)\n  }\n}\n\n/**\n * @public\n * Checks if the given string is a checksummed address\n */\nexport function isChecksumAddress(_address: string) {\n  // Check each case\n  const address = _address.replace('0x', '')\n  let addressHash = sha3(address.toLowerCase())\n\n  for (let i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (\n      (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n      (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @public\n * Makes a checksum address\n */\nexport function toChecksumAddress(_address: string) {\n  if (typeof _address === 'undefined') return ''\n\n  const address = _address.toLowerCase().replace('0x', '')\n  const addressHash = sha3(address)\n  let checksumAddress = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase()\n    } else {\n      checksumAddress += address[i]\n    }\n  }\n  return checksumAddress\n}\n\n/**\n * @public\n * Ensures the result will be an array\n */\nexport function toArray(value: any): any[] {\n  if (!Array.isArray(value)) {\n    throw new Error(`Value was not an array: ${JSON.stringify(value)}`)\n  }\n  return value\n}\n\n/**\n * @public\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n */\nexport function toAddress(address) {\n  if (isStrictAddress(address)) {\n    return address\n  }\n\n  if (/^[0-9a-f]{40}$/.test(address)) {\n    return '0x' + address\n  }\n\n  return '0x' + padLeft(toHex(address).substr(2), 40)\n}\n\n/**\n * @public\n * Returns true if object is BigNumber, otherwise false\n */\nexport function isBigNumber(object: any) {\n  return object instanceof BigNumber\n}\n\n/**\n * @public\n * Returns true if object is string, otherwise false\n */\nexport function isString(value: any): value is string {\n  return typeof value === 'string' || (value && value.constructor && value.constructor.name === 'String')\n}\n\n/**\n * @public\n * Returns true if object is function, otherwise false\n */\nexport function isFunction(object) {\n  return typeof object === 'function'\n}\n\n/**\n * @public\n * Returns true if object is Objet, otherwise false\n */\nexport function isObject(object) {\n  return object !== null && !Array.isArray(object) && typeof object === 'object'\n}\n\n/**\n * @public\n * Returns true if object is boolean, otherwise false\n */\nexport function isBoolean(object) {\n  return typeof object === 'boolean'\n}\n\n/**\n * @public\n * Returns true if object is array, otherwise false\n */\nexport function isArray(object) {\n  return Array.isArray(object)\n}\n\n/**\n * @public\n * Returns true if given string is valid json object\n */\nexport function isJson(str: string) {\n  try {\n    return !!JSON.parse(str)\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @public\n * Returns true if given string is a valid Ethereum block header bloom.\n */\nexport function isBloom(bloom: string) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false\n  } else if (/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return true\n  }\n  return false\n}\n\n/**\n * @public\n * Returns true if given string is a valid log topic.\n */\nexport function isTopic(topic: string) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false\n  } else if (/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return true\n  }\n  return false\n}\n","import { BigNumber } from \"bignumber.js\"\n\n/**\n * Hex string\n * @public\n */\nexport type Data = string\n\n/**\n * Hex string of 32 bytes\n * @public\n */\nexport type TxHash = string\n/**\n * Hex string of 20 bytes\n * @public\n */\nexport type Address = string\n/**\n * @public\n */\nexport type Hex = string\n/**\n * @public\n */\nexport type Quantity = number | Hex\n\n/**\n * @public\n */\nexport type Syncing = {\n  startingBlock: Quantity\n  currentBlock: Quantity\n  highestBlock: Quantity\n}\n\n/**\n * @public\n */\nexport enum TransactionStatus {\n  pending = 'pending',\n  confirmed = 'confirmed',\n  failed = 'failed'\n}\n\n/**\n * @public\n */\nexport type Tag = 'latest' | 'earliest' | 'pending'\n\n/**\n * @public\n */\nexport type TransactionOptions = {\n  /**\n   * The address the transaction is sent from.\n   */\n  from: Address\n\n  /**\n   * The address the transaction is directed to.\n   */\n  to: Address\n\n  /**\n   * Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter\n   * may be needed by some executions.\n   *\n   * Default: 90000\n   */\n  gas?: Quantity\n\n  /**\n   *  Integer of the gasPrice used for each paid gas\n   */\n  gasPrice?: Quantity\n\n  /**\n   * Integer of the value sent with this transaction\n   */\n  value?: Quantity\n\n  /**\n   * The compiled code of a contract OR the hash of the invoked method signature and encoded parameters.\n   * For details see Ethereum Contract ABI\n   */\n  data: string\n\n  /** Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce. */\n  nonce?: Quantity\n}\n\n/**\n * @public\n */\nexport type TransactionCallOptions = {\n  /**\n   * The address the transaction is sent from.\n   */\n  from?: Address\n\n  /**\n   * The address the transaction is directed to.\n   */\n  to: Address\n\n  /**\n   * Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter\n   * may be needed by some executions.\n   *\n   * Default: 90000\n   */\n  gas?: Quantity\n\n  /**\n   *  Integer of the gasPrice used for each paid gas\n   */\n  gasPrice?: Quantity\n\n  /**\n   * Integer of the value sent with this transaction\n   */\n  value?: Quantity\n\n  /**\n   * The compiled code of a contract OR the hash of the invoked method signature and encoded parameters.\n   * For details see Ethereum Contract ABI\n   */\n  data?: string\n}\n\n/**\n * @public\n */\nexport type BlockObject = {\n  /** the block number. null when its pending block. */\n  number: Quantity\n  /** hash of the block. null when its pending block. */\n  hash: TxHash\n  /** hash of the parent block. */\n  parentHash: TxHash\n  /** hash of the generated proof-of-work. null when its pending block. 8 Bytes  */\n  nonce: Data\n  /** SHA3 of the uncles data in the block. */\n  sha3Uncles: TxHash\n  /** the bloom filter for the logs of the block. null when its pending block. 256 Bytes */\n  logsBloom: Data\n  /** the root of the transaction trie of the block. */\n  transactionsRoot: TxHash\n  /** the root of the final state trie of the block. */\n  stateRoot: TxHash\n  /** the root of the receipts trie of the block. */\n  receiptsRoot: TxHash\n  /** the address of the beneficiary to whom the mining rewards were given. */\n  miner: Address\n  /** integer of the difficulty for this block. */\n  difficulty: Quantity\n  /** integer of the total difficulty of the chain until this block. */\n  totalDifficulty: Quantity\n  /** the \"extra data\" field of this block. */\n  extraData: Data\n  /** integer the size of this block in bytes. */\n  size: Quantity\n  /** the maximum gas allowed in this block. */\n  gasLimit: Quantity\n  /** the total used gas by all transactions in this block. */\n  gasUsed: Quantity\n  /** the unix timestamp for when the block was collated. */\n  timestamp: Quantity\n  /** Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter. */\n  transactions: Array<TxHash> | Array<TransactionObject>\n  /** Array of uncle hashes */\n  uncles: Array<TxHash>\n}\n\n/**\n * @public\n */\nexport type TransactionObject = {\n  /** hash of the transaction. */\n  hash: TxHash\n  /** the number of transactions made by the sender prior to this one. */\n  nonce: number\n  /** hash of the block where this transaction was in. null when its pending. */\n  blockHash: TxHash\n  /** block number where this transaction was in. null when its pending. */\n  blockNumber: number\n  /** integer of the transactions index position in the block. null when its pending. */\n  transactionIndex: number\n  /** address of the sender. */\n  from: Address\n  /** address of the receiver. null when its a contract creation transaction. */\n  to: Address | null\n  /** value transferred in Wei. */\n  value: BigNumber\n  /** gas price provided by the sender in Wei. */\n  gasPrice: BigNumber\n  /** gas provided by the sender. */\n  gas: Quantity\n  /** the data send along with the transaction. */\n  input: Data\n\n  v?: Data\n  r?: Data\n  s?: Data\n}\n\n/**\n * @public\n */\nexport type Transaction =\n  | DroppedTransaction\n  | ReplacedTransaction\n  | QueuedTransaction\n  | PendingTransaction\n  | ConfirmedTransaction\n  | RevertedTransaction\n\n/**\n * @public\n */\nexport enum TransactionType {\n  queued = 'queued',\n  dropped = 'dropped',\n  replaced = 'replaced',\n  pending = 'pending',\n  reverted = 'reverted',\n  confirmed = 'confirmed'\n}\n\n/**\n * @public\n */\nexport type DroppedTransaction = {\n  type: TransactionType.dropped\n  hash: string\n  nonce: number\n}\n\n/**\n * @public\n */\nexport type ReplacedTransaction = {\n  type: TransactionType.replaced\n  hash: string\n  nonce: number\n}\n\n/**\n * @public\n */\nexport type QueuedTransaction = {\n  type: TransactionType.queued\n  hash: string\n  nonce: number\n}\n\n/**\n * @public\n */\nexport type PendingTransaction = TransactionObject & {\n  type: TransactionType.pending\n}\n\n/**\n * @public\n */\nexport type RevertedTransaction = TransactionObject & {\n  type: TransactionType.reverted\n}\n\n/**\n * @public\n */\nexport type ConfirmedTransaction = TransactionObject & {\n  type: TransactionType.confirmed\n  receipt: TransactionReceipt\n}\n\n/**\n * @public\n */\nexport type FilterLog = {}\n/**\n * @public\n */\nexport type TransactionAndReceipt = TransactionObject & { receipt: TransactionReceipt }\n/**\n * @public\n */\nexport type FinishedTransactionAndReceipt = TransactionAndReceipt & { status: TransactionStatus }\n/**\n * @public\n */\nexport type BlockIdentifier = Quantity | Tag\n\n/**\n * @public\n */\nexport type FilterOptions = {\n  /** (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block or \"pending\", \"earliest\" for not yet mined transactions. */\n  fromBlock?: BlockIdentifier\n  /** (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block or \"pending\", \"earliest\" for not yet mined transactions. */\n  toBlock?: BlockIdentifier\n  /** (optional) Contract address or a list of addresses from which logs should originate. */\n  address?: Data | Address\n  /** (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with \"or\" options. */\n  topics?: Array<Data>\n}\n\n/**\n * @public\n */\nexport type TransactionReceipt = {\n  /** hash of the transaction. */\n  transactionHash: TxHash\n  /** integer of the transactions index position in the block. */\n  transactionIndex: Quantity\n  /** hash of the block where this transaction was in. */\n  blockHash: TxHash\n  /** block number where this transaction was in. */\n  blockNumber: Quantity\n  /** The total amount of gas used when this transaction was executed in the block. */\n  cumulativeGasUsed: Quantity\n  /** The amount of gas used by this specific transaction alone. */\n  gasUsed: Quantity\n  /**  The contract address created, if the transaction was a contract creation, otherwise null. */\n  contractAddress: Address\n  /** Array of log objects, which this transaction generated. */\n  logs: Array<FilterLog>\n  /**  256 Bytes - Bloom filter for light clients to quickly retrieve related logs. */\n  logsBloom: Data\n  /**  post-transaction stateroot (pre Byzantium) */\n  root?: TxHash\n  /** either 1 (success) or 0 (failure) */\n  status?: Quantity\n}\n\n/**\n * @public\n */\nexport type FilterChange = {\n  /** true when the log was removed, due to a chain reorganization. false if its a valid log. */\n  removed: boolean\n  /** integer of the log index position in the block. null when its pending log. */\n  logIndex: Quantity\n  /** integer of the transactions index position log was created from. null when its pending log. */\n  transactionIndex: Quantity\n  /** hash of the transactions this log was created from. null when its pending log. */\n  transactionHash: TxHash\n  /** hash of the block where this log was in. null when its pending. null when its pending log. */\n  blockHash: TxHash\n  /** the block number where this log was in. null when its pending. null when its pending log. */\n  blockNumber: Quantity\n  /** address from which this log originated. */\n  address: Address\n  /** contains one or more 32 Bytes non-indexed arguments of the log. */\n  data: Data\n  /**\n   * Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature\n   * of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)\n   */\n  topics: Array<Data>\n}\n\n/**\n * @public\n */\nexport type SHHPost = {\n  /** (optional) The identity of the sender. */\n  from: Data\n  /** (optional) The identity of the receiver. When present whisper will encrypt the message so that only the receiver can decrypt it. */\n  to: Data\n  /** Array of DATA topics, for the receiver to identify messages. */\n  topics: Array<Data>\n  /** The payload of the message. */\n  payload: Data\n  /** The integer of the priority in a rang from ... (?). */\n  priority: Quantity\n  /** integer of the time to live in seconds. */\n  ttl: Quantity\n}\n\n/**\n * @public\n */\nexport type SHHFilterOptions = {\n  /**\n   * (optional) Identity of the receiver. When present it will try to decrypt any incoming message if the client holds the private key to this identity.\n   */\n  to?: Data\n  /**\n   * Array of DATA topics which the incoming message's topics should match. You can use the following combinations:\n   * [A, B] = A && B\n   * [A, [B, C]] = A && (B || C)\n   * [null, A, B] = ANYTHING && A && B null works as a wildcard\n   */\n  topics: Array<Data>\n}\n\n/**\n * @public\n */\nexport type SHHFilterMessage = {\n  /** The hash of the message. */\n  hash: TxHash\n  /** The sender of the message, if a sender was specified. */\n  from: Data\n  /** The receiver of the message, if a receiver was specified. */\n  to: Data\n  /** Integer of the time in seconds when this message should expire (?). */\n  expiry: Quantity\n  /** Integer of the time the message should float in the system in seconds (?). */\n  ttl: Quantity\n  /** Integer of the unix timestamp when the message was sent. */\n  sent: Quantity\n  /** Array of DATA topics the message contained. */\n  topics: Array<Data>\n  /** The payload of the message. */\n  payload: Data\n  /** Integer of the work this message required before it was send (?). */\n  workProved: Quantity\n}\n","export type BigNumberRoundingModeType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\n\nexport enum BigNumberRoundingMode {\n  /**\n   * Rounds away from zero.\n   */\n  ROUND_UP = 0,\n\n  /**\n   * Rounds towards zero.\n   */\n  ROUND_DOWN = 1,\n\n  /**\n   * Rounds towards Infinity.\n   */\n  ROUND_CE = 2,\n\n  /**\n   * Rounds towards -Infinity.\n   */\n  ROUND_FLOOR = 3,\n\n  /**\n   * Rounds towards nearest neighbour. If equidistant, rounds away from zero .\n   */\n  ROUND_HALF_UP = 4,\n\n  /**\n   * Rounds towards nearest neighbour. If equidistant, rounds towards zero.\n   */\n  ROUND_HALF_DOWN = 5,\n\n  /**\n   * Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour.\n   */\n  ROUND_HALF_EVEN = 6,\n\n  /**\n   * Rounds towards nearest neighbour. If equidistant, rounds towards Infinity.\n   */\n  ROUND_HALF_CEIL = 7,\n\n  /**\n   * Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity.\n   */\n  ROUND_HALF_FLOOR = 8,\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport let messageId = 0\n\nexport type RPCSendableMessage = {\n  method: string\n  params: any[]\n}\n\n/**\n * Should be called to valid json create payload object\n */\nexport function toPayload(method: string, params: any[]) {\n  if (!method) {\n    throw new Error('jsonrpc method should be specified!')\n  }\n\n  if (typeof method !== 'string') {\n    throw new Error(`jsonrpc must be a string, got ${typeof method}!`)\n  }\n  // advance message ID\n  messageId++\n\n  return {\n    jsonrpc: '2.0',\n    id: messageId,\n    method: method,\n    params: params || []\n  }\n}\n\n/**\n * Should be called to check if jsonrpc response is valid\n */\nexport function isValidResponse(response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response)\n\n  function validateSingleMessage(message) {\n    return (\n      !!message &&\n      !message.error &&\n      message.jsonrpc === '2.0' &&\n      typeof message.id === 'number' &&\n      (message.result != null || message.result !== undefined)\n    ) // only undefined is not valid json object\n    // the null is not a valid response for rpc nodes\n  }\n}\n\n/**\n * Should be called to create batch payload object\n *\n * @param messages - An array of objects with method (required) and params (optional) fields\n */\nexport function toBatchPayload(messages: RPCSendableMessage[]) {\n  return messages.map(function(message) {\n    return toPayload(message.method, message.params)\n  })\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE\nimport { BigNumberRoundingMode, BigNumberRoundingModeType } from '../utils/BigNumber'\n\nexport const ETH_UNITS = [\n  'wei',\n  'kwei',\n  'Mwei',\n  'Gwei',\n  'szabo',\n  'finney',\n  'femtoether',\n  'picoether',\n  'nanoether',\n  'microether',\n  'milliether',\n  'nano',\n  'micro',\n  'milli',\n  'ether',\n  'grand',\n  'Mether',\n  'Gether',\n  'Tether',\n  'Pether',\n  'Eether',\n  'Zether',\n  'Yether',\n  'Nether',\n  'Dether',\n  'Vether',\n  'Uether'\n]\n\nexport const ETH_PADDING = 32\nexport const ETH_SIGNATURE_LENGTH = 4\nexport const ETH_BIGNUMBER_ROUNDING_MODE = {\n  ROUNDING_MODE: BigNumberRoundingMode.ROUND_DOWN as BigNumberRoundingModeType\n}\nexport const ETH_POLLING_TIMEOUT = 1000 / 2\nexport let defaultBlock: 'latest' = 'latest'\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from '../utils/utils'\nimport * as config from '../utils/config'\nimport { Quantity, Tag } from '../Schema'\nimport BigNumber from 'bignumber.js'\n\n/**\n * Should format the output to a big number\n *\n * @param output - The provided output\n */\nexport function outputBigNumberFormatter(output: string | number | BigNumber): BigNumber {\n  return utils.toBigNumber(output)\n}\n\n/**\n * Returns true if the provided blockNumber is 'latest', 'pending' or 'earliest\n *\n * @param blockNumber - The given blocknumber\n */\nexport function isPredefinedBlockNumber(blockNumber: Quantity | Tag): blockNumber is Tag {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest'\n}\n\nexport function inputDefaultBlockNumberFormatter(blockNumber?: Quantity | Tag): string | Tag {\n  if (blockNumber === undefined) {\n    return config.defaultBlock\n  }\n  return inputBlockNumberFormatter(blockNumber)\n}\n\nexport function inputBlockNumberFormatter(blockNumber: Quantity | Tag): string | null {\n  if (blockNumber === undefined || blockNumber == null) {\n    return undefined\n  } else if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber\n  }\n  return utils.toHex(blockNumber)\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n */\nexport function inputCallFormatter(options: { from: string; to: string; data: string }) {\n  options.from = options.from\n\n  if (options.from) {\n    options.from = inputAddressFormatter(options.from)\n  }\n\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to)\n  }\n\n  // tslint:disable-next-line:semicolon\n  ;['gasPrice', 'gas', 'value', 'nonce']\n    .filter(function(key) {\n      return options[key] !== undefined\n    })\n    .forEach(function(key) {\n      options[key] = utils.fromDecimal(options[key])\n    })\n\n  if (options.data && !options.data.startsWith('0x') && /^[A-Za-z0-9]+$/.test(options.data)) {\n    options.data = '0x' + options.data\n  }\n\n  return options\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @param transaction - options\n */\nexport function inputTransactionFormatter(options) {\n  if (typeof options !== 'object') {\n    throw new Error('Did not provide transaction options')\n  }\n\n  if (!options.from) {\n    throw new Error('Missing \"from\" in transaction options')\n  }\n\n  options.from = inputAddressFormatter(options.from)\n\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to)\n  }\n\n  // tslint:disable-next-line:semicolon\n  ;['gasPrice', 'gas', 'value', 'nonce']\n    .filter(function(key) {\n      return options[key] !== undefined\n    })\n    .forEach(function(key) {\n      options[key] = utils.fromDecimal(options[key])\n    })\n\n  if (options.data && !options.data.startsWith('0x') && /^[A-Za-z0-9]+$/.test(options.data)) {\n    options.data = '0x' + options.data\n  }\n\n  return options\n}\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @param tx - The transaction\n */\nexport function outputTransactionFormatter(tx) {\n  if (!tx) return null\n\n  if (tx.blockNumber !== null) {\n    tx.blockNumber = utils.toDecimal(tx.blockNumber)\n  }\n  if (tx.transactionIndex !== null) {\n    tx.transactionIndex = utils.toDecimal(tx.transactionIndex)\n  }\n  tx.nonce = utils.toDecimal(tx.nonce)\n  tx.gas = utils.toDecimal(tx.gas)\n  tx.gasPrice = utils.toBigNumber(tx.gasPrice)\n  tx.value = utils.toBigNumber(tx.value)\n  return tx\n}\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @param receipt - The transaction receipt\n */\nexport function outputTransactionReceiptFormatter(receipt) {\n  if (!receipt) return null\n\n  if (receipt.blockNumber !== null) receipt.blockNumber = utils.toDecimal(receipt.blockNumber)\n  if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex)\n  receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed)\n  receipt.gasUsed = utils.toDecimal(receipt.gasUsed)\n\n  if (utils.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(function(log) {\n      return outputLogFormatter(log)\n    })\n  }\n\n  receipt.status = utils.toDecimal(receipt.status)\n\n  return receipt\n}\n\n/**\n * Formats the output of a block to its proper value\n */\nexport function outputBlockFormatter(block) {\n  if (!block) return null\n  // transform to number\n  block.gasLimit = utils.toDecimal(block.gasLimit)\n  block.gasUsed = utils.toDecimal(block.gasUsed)\n  block.size = utils.toDecimal(block.size)\n  block.timestamp = utils.toDecimal(block.timestamp)\n  if (block.number !== null) block.number = utils.toDecimal(block.number)\n\n  block.difficulty = utils.toBigNumber(block.difficulty)\n  block.totalDifficulty = utils.toBigNumber(block.totalDifficulty)\n\n  if (utils.isArray(block.transactions)) {\n    block.transactions.forEach(function(item) {\n      if (!utils.isString(item)) return outputTransactionFormatter(item)\n    })\n  }\n\n  return block\n}\n\n/**\n * Formats the output of a log\n */\nexport function outputLogFormatter(log) {\n  if (!log) return null\n\n  if (log.blockNumber) {\n    log.blockNumber = utils.toDecimal(log.blockNumber)\n  }\n\n  if (log.transactionIndex) {\n    log.transactionIndex = utils.toDecimal(log.transactionIndex)\n  }\n\n  if (log.logIndex) {\n    log.logIndex = utils.toDecimal(log.logIndex)\n  }\n\n  return log\n}\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport function inputPostFormatter(post: any) {\n  if (!post) return null\n\n  post.ttl = utils.fromDecimal(post.ttl)\n  post.workToProve = utils.fromDecimal(post.workToProve)\n  post.priority = utils.fromDecimal(post.priority)\n\n  // fallback\n  if (!utils.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics as string] : []\n  }\n\n  // format the following options\n  post.topics = post.topics.map(function(topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic)\n  })\n\n  return post\n}\n\n/**\n * Formats the output of a received post message\n */\nexport function outputPostFormatter(post: any) {\n  if (!post) return null\n\n  post.expiry = utils.toDecimal(post.expiry)\n  post.sent = utils.toDecimal(post.sent)\n  post.ttl = utils.toDecimal(post.ttl)\n  post.workProved = utils.toDecimal(post.workProved)\n\n  // format the following options\n  if (!post.topics) {\n    post.topics = []\n  }\n  post.topics = post.topics.map(function(topic) {\n    return utils.toAscii(topic)\n  })\n\n  return post\n}\n\nexport function inputAddressFormatter(address) {\n  if (utils.isStrictAddress(address)) {\n    return address\n  } else if (utils.isAddress(address)) {\n    return '0x' + address\n  }\n  throw new Error(`Invalid address: ${JSON.stringify(address)}`)\n}\n\nexport function outputSyncingFormatter(result) {\n  if (!result) {\n    return result\n  }\n\n  result.startingBlock = utils.toDecimal(result.startingBlock)\n  result.currentBlock = utils.toDecimal(result.currentBlock)\n  result.highestBlock = utils.toDecimal(result.highestBlock)\n  if (result.knownStates) {\n    result.knownStates = utils.toDecimal(result.knownStates)\n    result.pulledStates = utils.toDecimal(result.pulledStates)\n  }\n\n  return result\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as errors from './utils/errors'\nimport { RequestManager } from './RequestManager'\n\n/**\n * @public\n */\nexport class Method<V> {\n  callName: string\n  params: number\n  inputFormatter: Function[] | null\n  outputFormatter: (something: any) => V\n  requestManager: RequestManager\n\n  constructor(options: { callName: string; params: number; inputFormatter?: any[]; outputFormatter: (val: any) => V }) {\n    this.callName = options.callName\n    this.params = options.params || 0\n    this.inputFormatter = options.inputFormatter || null\n    this.outputFormatter = options.outputFormatter\n    this.requestManager = null\n  }\n\n  /**\n   * Should be called to check if the number of arguments is correct\n   *\n   * @param arguments - The list of arguments\n   */\n  validateArgs(args: any[]) {\n    if (args.length !== this.params) {\n      throw errors.InvalidNumberOfRPCParams(this.callName, args.length, this.params)\n    }\n  }\n\n  /**\n   * Should be called to format input args of method\n   *\n   * @param args - The array of arguments\n   */\n  formatInput(args: any[]) {\n    if (!this.inputFormatter) {\n      return args\n    }\n\n    return this.inputFormatter.map(function(formatter, index) {\n      return formatter ? formatter(args[index]) : args[index]\n    })\n  }\n\n  /**\n   * Should be called to format output(result) of method\n   *\n   * @param result - The result to be formatted\n   */\n  formatOutput(result: any): V | null {\n    return result !== null ? this.outputFormatter(result) : null\n  }\n\n  /**\n   * Should create payload from given input args\n   *\n   * @param args - The given input arguments\n   */\n  toPayload(args: any[]) {\n    let params = this.formatInput(args)\n\n    this.validateArgs(params)\n\n    return {\n      method: this.callName,\n      params: params\n    }\n  }\n\n  async execute(requestManager: RequestManager, ...args: any[]) {\n    let payload = this.toPayload(args)\n    if (!requestManager) throw new Error('Missing RequestManager in method#exec')\n    const result = await requestManager.sendAsync(payload)\n    return this.formatOutput(result)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport function InvalidNumberOfSolidityArgs(given: number, expected: number) {\n  return new Error(`Invalid number of arguments to Solidity function. given: ${given}, expected: ${expected}`)\n}\n\nexport function InvalidNumberOfRPCParams(methodName: string, given: number, expected: number) {\n  return new Error(\n    `Invalid number of input parameters to RPC method \"${methodName}\" given: ${given}, expected: ${expected}`\n  )\n}\n\nexport function InvalidConnection(host) {\n  return new Error(\"CONNECTION ERROR: Couldn't connect to node \" + host + '.')\n}\n\nexport function InvalidProvider() {\n  return new Error('Provider not set or invalid')\n}\n\nexport function InvalidResponse(result) {\n  let message =\n    !!result && !!result.error && !!result.error.message\n      ? result.error.message\n      : 'Invalid JSON RPC response: ' + JSON.stringify(result)\n  return new Error(message)\n}\n\nexport function ConnectionTimeout(ms) {\n  return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived')\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { RequestManager } from './RequestManager'\n\nexport interface IPropertyOptions<V> {\n  getter: string\n  outputFormatter: (_: any) => V\n}\n\n/**\n * @public\n */\nexport class Property<V> {\n  getter: string\n  outputFormatter: Function | null\n\n  constructor(options: IPropertyOptions<V>) {\n    this.getter = options.getter\n    this.outputFormatter = options.outputFormatter\n  }\n\n  /**\n   * Should be called to format output(result) of method\n   *\n   * @param result - The result to be formatted\n   */\n  formatOutput(result: any) {\n    return this.outputFormatter(result)\n  }\n\n  async execute(requestManager: RequestManager) {\n    const result = await requestManager.sendAsync({\n      method: this.getter,\n      params: []\n    })\n    return this.formatOutput(result)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n// tslint:disable:variable-name\n\nimport * as formatters from '../utils/formatters'\nimport * as utils from '../utils/utils'\nimport { Method } from '../Method'\nimport { Property } from '../Property'\nimport BigNumber from 'bignumber.js'\n\n/**\n * @public\n */\nexport namespace eth {\n  export const eth_getBalance = new Method<BigNumber>({\n    callName: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatters.outputBigNumberFormatter\n  })\n\n  export const eth_getStorageAt = new Method({\n    callName: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatters.inputAddressFormatter, utils.toHex, formatters.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_getCode = new Method({\n    callName: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_getBlockByHash = new Method({\n    callName: 'eth_getBlockByHash',\n    params: 2,\n    inputFormatter: [\n      formatters.inputBlockNumberFormatter,\n      function(val) {\n        return !!val\n      }\n    ],\n    outputFormatter: formatters.outputBlockFormatter\n  })\n\n  export const eth_getBlockByNumber = new Method({\n    callName: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [\n      formatters.inputBlockNumberFormatter,\n      function(val) {\n        return !!val\n      }\n    ],\n    outputFormatter: formatters.outputBlockFormatter\n  })\n\n  export const eth_getUncleByBlockHashAndIndex = new Method({\n    callName: 'eth_getUncleByBlockHashAndIndex',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n    outputFormatter: formatters.outputBlockFormatter\n  })\n\n  export const eth_getUncleByBlockNumberAndIndex = new Method({\n    callName: 'eth_getUncleByBlockNumberAndIndex',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n    outputFormatter: formatters.outputBlockFormatter\n  })\n\n  export const eth_getBlockTransactionCountByHash = new Method({\n    callName: 'eth_getBlockTransactionCountByHash',\n    params: 1,\n    inputFormatter: [formatters.inputBlockNumberFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_getBlockTransactionCountByNumber = new Method({\n    callName: 'eth_getBlockTransactionCountByNumber',\n    params: 1,\n    inputFormatter: [formatters.inputBlockNumberFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_getUncleCountByBlockHash = new Method({\n    callName: 'eth_getUncleCountByBlockHash',\n    params: 1,\n    inputFormatter: [formatters.inputBlockNumberFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_getUncleCountByBlockNumber = new Method({\n    callName: 'eth_getUncleCountByBlockNumber',\n    params: 1,\n    inputFormatter: [formatters.inputBlockNumberFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_getTransactionByHash = new Method({\n    callName: 'eth_getTransactionByHash',\n    params: 1,\n    outputFormatter: formatters.outputTransactionFormatter\n  })\n\n  export const eth_getTransactionByBlockHashAndIndex = new Method({\n    callName: 'eth_getTransactionByBlockHashAndIndex',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n    outputFormatter: formatters.outputTransactionFormatter\n  })\n\n  export const eth_getTransactionByBlockNumberAndIndex = new Method({\n    callName: 'eth_getTransactionByBlockNumberAndIndex',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n    outputFormatter: formatters.outputTransactionFormatter\n  })\n\n  export const eth_getTransactionReceipt = new Method({\n    callName: 'eth_getTransactionReceipt',\n    params: 1,\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  })\n\n  export const eth_getTransactionCount = new Method({\n    callName: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_sendRawTransaction = new Method({\n    callName: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: utils.toData\n  })\n\n  export const web3_sha3 = new Method({\n    callName: 'web3_sha3',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_sendTransaction = new Method({\n    callName: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatters.inputTransactionFormatter],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_sign = new Method({\n    callName: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, null],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_call = new Method({\n    callName: 'eth_call',\n    params: 2,\n    inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.toData\n  })\n\n  export const eth_estimateGas = new Method({\n    callName: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatters.inputCallFormatter],\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_submitWork = new Method({\n    callName: 'eth_submitWork',\n    params: 3,\n    outputFormatter: utils.toBoolean\n  })\n\n  export const eth_getWork = new Method({\n    callName: 'eth_getWork',\n    params: 1,\n    outputFormatter: utils.toArray\n  })\n\n  export const eth_coinbase = new Property({\n    getter: 'eth_coinbase',\n    outputFormatter: utils.toAddress\n  })\n\n  export const eth_mining = new Property({\n    getter: 'eth_mining',\n    outputFormatter: utils.toBoolean\n  })\n\n  export const eth_hashrate = new Property({\n    getter: 'eth_hashrate',\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_syncing = new Property({\n    getter: 'eth_syncing',\n    outputFormatter: formatters.outputSyncingFormatter\n  })\n\n  export const eth_gasPrice = new Property({\n    getter: 'eth_gasPrice',\n    outputFormatter: formatters.outputBigNumberFormatter\n  })\n\n  export const eth_accounts = new Property({\n    getter: 'eth_accounts',\n    outputFormatter: utils.toArray\n  })\n\n  export const eth_blockNumber = new Property({\n    getter: 'eth_blockNumber',\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_protocolVersion = new Property({\n    getter: 'eth_protocolVersion',\n    outputFormatter: utils.toDecimal\n  })\n\n  export const web3_clientVersion = new Property({\n    getter: 'web3_clientVersion',\n    outputFormatter: utils.toString\n  })\n\n  export const net_version = new Property({\n    getter: 'net_version',\n    outputFormatter: utils.toString\n  })\n\n  export const shh_version = new Method({\n    callName: 'shh_version',\n    params: 0,\n    outputFormatter: utils.toDecimal\n  })\n\n  // subscribe and unsubscribe missing\n\n  export const shh_post = new Method({\n    callName: 'shh_post',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: utils.toBoolean\n  })\n\n  export const personal_newAccount = new Method({\n    callName: 'personal_newAccount',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: utils.toAddress\n  })\n\n  export const personal_importRawKey = new Method({\n    callName: 'personal_importRawKey',\n    params: 2,\n    outputFormatter: utils.toAddress\n  })\n\n  export const personal_sign = new Method({\n    callName: 'personal_sign',\n    params: 3,\n    inputFormatter: [null, formatters.inputAddressFormatter, null],\n    outputFormatter: utils.toData\n  })\n\n  export const personal_ecRecover = new Method({\n    callName: 'personal_ecRecover',\n    params: 2,\n    outputFormatter: utils.toAddress\n  })\n\n  export const personal_unlockAccount = new Method({\n    callName: 'personal_unlockAccount',\n    params: 3,\n    inputFormatter: [formatters.inputAddressFormatter, null, utils.toNullDecimal],\n    outputFormatter: utils.toBoolean\n  })\n\n  export const personal_sendTransaction = new Method({\n    callName: 'personal_sendTransaction',\n    params: 2,\n    inputFormatter: [formatters.inputTransactionFormatter, null],\n    outputFormatter: utils.toData\n  })\n\n  export const personal_lockAccount = new Method({\n    callName: 'personal_lockAccount',\n    params: 1,\n    inputFormatter: [formatters.inputAddressFormatter],\n    outputFormatter: utils.toBoolean\n  })\n\n  export const personal_listAccounts = new Property({\n    getter: 'personal_listAccounts',\n    outputFormatter: utils.toArray\n  })\n\n  export const net_listening = new Property({\n    getter: 'net_listening',\n    outputFormatter: utils.toBoolean\n  })\n\n  export const net_peerCount = new Property({\n    getter: 'net_peerCount',\n    outputFormatter: utils.toDecimal\n  })\n\n  export const eth_newFilter = new Method({\n    callName: 'eth_newFilter',\n    params: 1,\n    outputFormatter: utils.toHex\n  })\n\n  export const eth_getLogs = new Method({\n    callName: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [utils.toHex],\n    outputFormatter: utils.toArray\n  })\n\n  export const eth_newBlockFilter = new Method({\n    callName: 'eth_newBlockFilter',\n    params: 0,\n    outputFormatter: utils.toHex\n  })\n\n  export const eth_newPendingTransactionFilter = new Method({\n    callName: 'eth_newPendingTransactionFilter',\n    params: 0,\n    outputFormatter: utils.toHex\n  })\n\n  export const eth_uninstallFilter = new Method({\n    callName: 'eth_uninstallFilter',\n    params: 1,\n    inputFormatter: [utils.toHex],\n    outputFormatter: utils.toBoolean\n  })\n\n  export const eth_getFilterLogs = new Method({\n    callName: 'eth_getFilterLogs',\n    params: 1,\n    inputFormatter: [utils.toHex],\n    outputFormatter: utils.toArray\n  })\n\n  export const eth_getFilterChanges = new Method({\n    callName: 'eth_getFilterChanges',\n    params: 1,\n    inputFormatter: [utils.toHex],\n    outputFormatter: utils.toArray\n  })\n\n  export const eth_submitHashrate = new Method({\n    callName: 'eth_submitHashrate',\n    params: 2,\n    outputFormatter: utils.toBoolean\n  })\n\n  export const shh_newIdentity = new Method({\n    callName: 'shh_newIdentity',\n    params: 0,\n    outputFormatter: utils.toData\n  })\n\n  export const shh_hasIdentity = new Method({\n    callName: 'shh_hasIdentity',\n    params: 1,\n    outputFormatter: utils.toBoolean\n  })\n\n  export const shh_newGroup = new Method({\n    callName: 'shh_newGroup',\n    params: 0,\n    outputFormatter: utils.toData\n  })\n\n  export const shh_addToGroup = new Method({\n    callName: 'shh_addToGroup',\n    params: 1,\n    outputFormatter: utils.toBoolean\n  })\n\n  export const shh_newFilter = new Method({\n    callName: 'shh_newFilter',\n    params: 1,\n    outputFormatter: utils.toHex\n  })\n\n  export const shh_uninstallFilter = new Method({\n    callName: 'shh_uninstallFilter',\n    params: 1,\n    outputFormatter: utils.toBoolean\n  })\n\n  export const shh_getLogs = new Method({\n    callName: 'shh_getLogs',\n    params: 1,\n    outputFormatter: utils.toArray\n  })\n\n  export const shh_getFilterMessages = new Method({\n    callName: 'shh_getFilterMessages',\n    params: 1,\n    outputFormatter: utils.toArray\n  })\n\n  export const shh_getFilterChanges = new Method({\n    callName: 'shh_getFilterChanges',\n    params: 1,\n    outputFormatter: utils.toArray\n  })\n\n  export const shh_getMessages = new Method({\n    callName: 'shh_getMessages',\n    params: 1,\n    outputFormatter: utils.toArray\n  })\n}\n","/**\n * Sleep for a certain amount of milliseconds\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// tslint:disable:variable-name\n\nimport { RPCSendableMessage, toPayload, isValidResponse } from './utils/jsonrpc'\nimport { InvalidProvider, InvalidResponse } from './utils/errors'\nimport { IFuture, future } from 'fp-future'\nimport { eth } from './methods/eth'\n\nimport {\n  SHHFilterOptions,\n  Data,\n  Quantity,\n  SHHFilterMessage,\n  SHHPost,\n  FilterChange,\n  TransactionReceipt,\n  BlockObject,\n  TransactionObject,\n  TransactionCallOptions,\n  TransactionOptions,\n  Syncing,\n  TxHash,\n  Address,\n  FilterOptions,\n  QueuedTransaction,\n  PendingTransaction,\n  ReplacedTransaction,\n  Transaction,\n  RevertedTransaction,\n  ConfirmedTransaction,\n  TransactionType,\n  BlockIdentifier,\n  TransactionStatus,\n  FinishedTransactionAndReceipt,\n  TransactionAndReceipt\n} from './Schema'\nimport { sleep } from './utils/sleep'\nimport BigNumber from 'bignumber.js'\n\nexport let TRANSACTION_FETCH_DELAY: number = 2 * 1000\n\nexport function inject(target: Object, propertyKey: string | symbol) {\n  const method = eth[propertyKey]\n\n  /* istanbul ignore if */\n  if (!method) {\n    throw new Error(`Could not find the method/property named ${propertyKey.toString()}`)\n  }\n\n  Object.defineProperty(target, propertyKey, {\n    value: function() {\n      return method.execute.call(method, this, ...arguments)\n    }\n  })\n}\n\n/**\n * @public\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n */\nexport class RequestManager {\n  // @internal\n  requests = new Map<number, IFuture<any>>()\n\n  /** Returns the current client version. */\n  @inject web3_clientVersion: () => Promise<string>\n\n  /** Returns Keccak-256 (not the standardized SHA3-256) of the given data. */\n  @inject web3_sha3: (data: Data) => Promise<Data>\n\n  /** Returns the current network id. */\n  @inject net_version: () => Promise<string>\n\n  /** Returns number of peers currently connected to the client. */\n  @inject net_peerCount: () => Promise<Quantity>\n\n  /** Returns true if client is actively listening for network connections. */\n  @inject net_listening: () => Promise<boolean>\n\n  /** Returns the current ethereum protocol version. */\n  @inject eth_protocolVersion: () => Promise<number>\n\n  /** Returns an object with data about the sync status or false. */\n  @inject eth_syncing: () => Promise<false | Syncing>\n\n  /** Returns the client coinbase address. */\n  @inject eth_coinbase: () => Promise<Address>\n\n  /** Returns true if client is actively mining new blocks. */\n  @inject eth_mining: () => Promise<boolean>\n\n  /** Returns the number of hashes per second that the node is mining with. */\n  @inject eth_hashrate: () => Promise<Quantity>\n\n  /** Returns the current price per gas in wei. */\n  @inject eth_gasPrice: () => Promise<BigNumber>\n\n  /** Returns a list of addresses owned by client. */\n  @inject eth_accounts: () => Promise<Address[]>\n\n  /** Returns the number of most recent block. */\n  @inject eth_blockNumber: () => Promise<Quantity>\n\n  /** Returns the balance of the account of given address. */\n  @inject eth_getBalance: (address: Address, block: BlockIdentifier) => Promise<BigNumber>\n\n  /** Returns the value from a storage position at a given address. */\n  @inject eth_getStorageAt: (address: Address, position: Quantity, block: BlockIdentifier) => Promise<Data>\n\n  /** Returns the number of transactions sent from an address. */\n  @inject eth_getTransactionCount: (address: Address, block: BlockIdentifier) => Promise<number>\n\n  /** Returns the number of transactions in a block from a block matching the given block hash. */\n  @inject eth_getBlockTransactionCountByHash: (blockHash: TxHash) => Promise<number>\n\n  /** Returns the number of transactions in a block matching the given block number. */\n  @inject eth_getBlockTransactionCountByNumber: (block: BlockIdentifier) => Promise<number>\n\n  /** Returns the number of uncles in a block from a block matching the given block hash. */\n  @inject eth_getUncleCountByBlockHash: (blockHash: TxHash) => Promise<number>\n\n  /** Returns the number of uncles in a block from a block matching the given block number. */\n  @inject eth_getUncleCountByBlockNumber: (block: BlockIdentifier) => Promise<number>\n\n  /** Returns code at a given address. */\n  @inject eth_getCode: (address: Address, block: BlockIdentifier) => Promise<Data>\n\n  /**\n   * The sign method calculates an Ethereum specific signature with:\n   *\n   * sign(keccak256(\"Ethereum Signed Message:\" + len(message) + message))).\n   *\n   * By adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.\n   * This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to\n   * impersonate the victim.\n   *\n   * Note the address to sign with must be unlocked.\n   *\n   * @deprecated see https://github.com/ethereum/go-ethereum/pull/2940\n   */\n  @inject eth_sign: (address: Address, message: Data) => Promise<Data>\n\n  /** Creates new message call transaction or a contract creation, if the data field contains code. */\n  @inject eth_sendTransaction: (options: TransactionOptions) => Promise<TxHash>\n\n  /** Creates new message call transaction or a contract creation for signed transactions. */\n  @inject eth_sendRawTransaction: (rawTransaction: Data) => Promise<TxHash>\n\n  /** Executes a new message call immediately without creating a transaction on the block chain. */\n  @inject eth_call: (options: TransactionCallOptions, block: BlockIdentifier) => Promise<Data>\n  /**\n   * Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.\n   * The transaction will not be added to the blockchain. Note that the estimate may be significantly more\n   * than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics\n   * and node performance.\n   */\n  @inject eth_estimateGas: (data: Partial<TransactionCallOptions> & Partial<TransactionOptions>) => Promise<Quantity>\n\n  /** Returns information about a block by hash. */\n  @inject eth_getBlockByHash: (blockHash: TxHash, fullTransactionObjects: boolean) => Promise<BlockObject>\n\n  /** Returns information about a block by block number. */\n  @inject eth_getBlockByNumber: (block: BlockIdentifier, fullTransactionObjects: boolean) => Promise<BlockObject>\n\n  /** Returns the information about a transaction requested by transaction hash. */\n  @inject eth_getTransactionByHash: (hash: TxHash) => Promise<TransactionObject>\n\n  /** Returns information about a transaction by block hash and transaction index position. */\n  @inject eth_getTransactionByBlockHashAndIndex: (blockHash: TxHash, txIndex: Quantity) => Promise<TransactionObject>\n\n  /** Returns information about a transaction by block number and transaction index position. */\n  @inject\n  eth_getTransactionByBlockNumberAndIndex: (block: BlockIdentifier, txIndex: Quantity) => Promise<TransactionObject>\n  /**\n   * Returns the receipt of a transaction by transaction hash.\n   * Note That the receipt is not available for pending transactions.\n   */\n  @inject eth_getTransactionReceipt: (hash: TxHash) => Promise<TransactionReceipt>\n\n  /** Returns information about a uncle of a block by hash and uncle index position. */\n  @inject eth_getUncleByBlockHashAndIndex: (blockHash: TxHash, index: Quantity) => Promise<BlockObject>\n\n  /** Returns information about a uncle of a block by number and uncle index position. */\n  @inject eth_getUncleByBlockNumberAndIndex: (block: BlockIdentifier, index: Quantity) => Promise<BlockObject>\n\n  /**\n   * Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state\n   * has changed, call eth_getFilterChanges.\n   *\n   * A note on specifying topic filters:\n   * Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic\n   * filters:\n   *\n   * [] \"anything\"\n   * [A] \"A in first position (and anything after)\"\n   * [null, B] \"anything in first position AND B in second position (and anything after)\"\n   * [A, B] \"A in first position AND B in second position (and anything after)\"\n   * [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"\n   */\n  @inject eth_newFilter: (options: FilterOptions) => Promise<Data> // this should be quantity\n\n  /**\n   * Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call\n   * eth_getFilterChanges.\n   */\n  @inject eth_newBlockFilter: () => Promise<Data> // this should be quantity\n\n  /**\n   * Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed,\n   * call eth_getFilterChanges.\n   */\n  @inject eth_newPendingTransactionFilter: () => Promise<Data> // this should be quantity\n\n  /**\n   * Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters\n   * timeout when they aren't requested with eth_getFilterChanges for a period of time.\n   */\n  @inject eth_uninstallFilter: (filterId: Data) => Promise<boolean>\n\n  /**\n   * Polling method for a filter, which returns an array of logs which occurred since last poll.\n   */\n  @inject eth_getFilterChanges: (filterId: Data) => Promise<Array<TxHash> | Array<FilterChange>>\n\n  /** Returns an array of all logs matching filter with given id. */\n  @inject eth_getFilterLogs: (filterId: Data) => Promise<Array<TxHash> | Array<FilterChange>>\n\n  /** Returns an array of all logs matching a given filter object. */\n  @inject eth_getLogs: (options: FilterOptions) => Promise<Array<TxHash> | Array<FilterChange>>\n\n  /**\n   * Returns the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n   *\n   * @returns Array with the following properties:\n   * @alpha\n   *\n   * DATA, 32 Bytes - current block header pow-hash\n   * DATA, 32 Bytes - the seed hash used for the DAG.\n   * DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n   */\n  @inject eth_getWork: (blockHeaderHash: Data) => Promise<Array<TxHash>>\n\n  /** Used for submitting a proof-of-work solution. */\n  @inject eth_submitWork: (data: Data, powHash: TxHash, digest: TxHash) => Promise<boolean>\n\n  /** Used for submitting mining hashrate. */\n  @inject eth_submitHashrate: (hashRate: Data, id: Data) => Promise<boolean>\n\n  /** Sends a whisper message. */\n  @inject shh_post: (data: SHHPost) => Promise<boolean>\n\n  /** Returns the current whisper protocol version. */\n  @inject shh_version: () => Promise<string>\n\n  /** Creates new whisper identity in the client. */\n  @inject shh_newIdentity: () => Promise<Data>\n\n  /** Checks if the client hold the private keys for a given identity. */\n  @inject shh_hasIdentity: (identity: Data) => Promise<boolean>\n  @inject shh_newGroup: () => Promise<Data>\n  @inject shh_addToGroup: (group: Data) => Promise<boolean>\n\n  /** Creates filter to notify, when client receives whisper message matching the filter options. */\n  @inject shh_newFilter: (options: SHHFilterOptions) => Promise<Data> // this should be quantity\n\n  /**\n   * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n   * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n   */\n  @inject shh_uninstallFilter: (filterId: Data) => Promise<boolean>\n\n  /**\n   * Polling method for whisper filters. Returns new messages since the last call of this method.\n   *\n   * Note calling the shh_getMessages method, will reset the buffer for this method, so that you won't receive duplicate\n   * messages.\n   */\n  @inject shh_getFilterChanges: (filterId: Data) => Promise<Array<SHHFilterMessage>>\n\n  /** Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages. */\n  @inject shh_getMessages: (filterId: Data) => Promise<Array<SHHFilterMessage>>\n\n  /**\n   * Decrypts the key with the given address from the key store.\n   *\n   * Both passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not\n   * supplied as an argument, the console will prompt for the passphrase interactively.\n   *\n   * The unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to\n   * 300 seconds. An explicit duration of zero seconds unlocks the key until geth exits.\n   *\n   * The account can be used with eth_sign and eth_sendTransaction while it is unlocked.\n   */\n  @inject personal_unlockAccount: (account: Address, passPhrase?: Data, seconds?: Quantity) => Promise<boolean>\n\n  /**\n   * Generates a new private key and stores it in the key store directory. The key file is encrypted with the given\n   * passphrase. Returns the address of the new account.\n   *\n   * At the geth console, newAccount will prompt for a passphrase when it is not supplied as the argument.\n   */\n  @inject personal_newAccount: (passPhrase: Data) => Promise<Address>\n\n  /** Returns all the Ethereum account addresses of all keys in the key store. */\n  @inject personal_listAccounts: () => Promise<Array<Address>>\n\n  /** Removes the private key with given address from memory. The account can no longer be used to send transactions. */\n  @inject personal_lockAccount: (address: Address) => Promise<boolean>\n\n  /**\n   * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\n   * Returns the address of the new account.\n   */\n  @inject personal_importRawKey: (keydata: Data, passPhrase: Data) => Promise<Address>\n\n  /**\n   * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\n   * Returns the address of the new account.\n   */\n  @inject personal_sendTransaction: (txObject: TransactionOptions, passPhrase: Data) => Promise<TxHash>\n\n  /**\n   * The sign method calculates an Ethereum specific signature with:\n   *   sign(keccack256(\"Ethereum Signed Message:\" + len(message) + message))).\n   *\n   * By adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.\n   * This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to\n   * impersonate the victim.\n   *\n   * See ecRecover to verify the signature.\n   */\n  @inject personal_sign: (data: Data, signerAddress: Address, passPhrase: Data) => Promise<Data>\n\n  /**\n   * ecRecover returns the address associated with the private key that was used to calculate the signature in\n   * personal_sign.\n   */\n  @inject personal_ecRecover: (message: Data, signature: Data) => Promise<Address>\n\n  constructor(public provider: any) {\n    // stub\n  }\n\n  /**\n   * Should be used to asynchronously send request\n   *\n   * @param data - The RPC message to be sent\n   */\n  async sendAsync(data: RPCSendableMessage) {\n\n    const provider = await this.provider\n\n    /* istanbul ignore if */\n    if (!provider) {\n      throw InvalidProvider()\n    }\n\n    let payload = toPayload(data.method, data.params)\n\n    const defer = future()\n\n    this.requests.set(payload.id, defer)\n\n    provider.sendAsync(payload, (err, result) => {\n      this.requests.delete(payload.id)\n\n      if (err) {\n        defer.reject(err)\n        return\n      }\n\n      /* istanbul ignore if */\n      if (!isValidResponse(result)) {\n        defer.reject(InvalidResponse(result))\n        return\n      }\n      defer.resolve(result.result)\n    })\n\n    return defer\n  }\n\n  /**\n   * Should be used to set provider of request manager\n   *\n   * @param p - The provider\n   */\n  setProvider(p: any) {\n    this.provider = p\n  }\n\n  /**\n   * Waits until the transaction finishes. Returns if it was successfull.\n   * Throws if the transaction fails or if it lacks any of the supplied events\n   * @param txId - Transaction id to watch\n   */\n  async getConfirmedTransaction(txId: string): Promise<FinishedTransactionAndReceipt> {\n    const tx = await this.waitForCompletion(txId)\n\n    if (this.isFailure(tx)) {\n      throw new Error(`Transaction \"${txId}\" failed`)\n    }\n\n    return tx\n  }\n\n  /**\n   * Wait until a transaction finishes by either being mined or failing\n   * @param txId - Transaction id to watch\n   * @param retriesOnEmpty - Number of retries when a transaction status returns empty\n   */\n  async waitForCompletion(txId: string, retriesOnEmpty?: number): Promise<FinishedTransactionAndReceipt> {\n    const isDropped = await this.isTxDropped(txId, retriesOnEmpty)\n\n    if (isDropped) {\n      const tx = await this.getTransactionAndReceipt(txId)\n      return { ...tx, status: TransactionStatus.failed }\n    }\n\n    while (true) {\n      const tx = await this.getTransactionAndReceipt(txId)\n\n      if (!this.isPending(tx) && tx.receipt) {\n        return {\n          ...tx,\n          status: this.isFailure(tx) ? TransactionStatus.failed : TransactionStatus.confirmed\n        }\n      }\n\n      await sleep(TRANSACTION_FETCH_DELAY)\n    }\n  }\n\n  /**\n   * Returns a transaction in any of the possible states.\n   * @param hash - The transaction hash\n   */\n  async getTransaction(hash: string): Promise<Transaction> {\n    let currentNonce: number\n    let status: TransactionObject\n    try {\n      const accounts = await this.eth_accounts()\n      const account = accounts[0]\n      if (account) {\n        currentNonce = await this.eth_getTransactionCount(account, 'latest')\n      }\n    } catch (error) {\n      currentNonce = null\n    }\n\n    try {\n      status = await this.eth_getTransactionByHash(hash)\n      // not found\n      if (status == null) {\n        return null\n      }\n    } catch (e) {\n      return null\n    }\n\n    if (status.blockNumber == null) {\n      if (currentNonce != null) {\n        // replaced\n        if (status.nonce < currentNonce) {\n          const tx: ReplacedTransaction = {\n            hash,\n            type: TransactionType.replaced,\n            nonce: status.nonce\n          }\n          return tx\n        }\n\n        // queued\n        if (status.nonce > currentNonce) {\n          const tx: QueuedTransaction = {\n            hash,\n            type: TransactionType.queued,\n            nonce: status.nonce\n          }\n          return tx\n        }\n      }\n\n      // pending\n      const tx: PendingTransaction = {\n        type: TransactionType.pending,\n        ...status\n      }\n      return tx\n    }\n\n    let receipt: TransactionReceipt\n\n    try {\n      receipt = await this.eth_getTransactionReceipt(hash)\n\n      // reverted\n      if (receipt == null || receipt.status === 0x0) {\n        const tx: RevertedTransaction = {\n          type: TransactionType.reverted,\n          ...status\n        }\n        return tx\n      }\n    } catch (e) {\n      // TODO: should this be null or reverted?\n      return null\n    }\n\n    // confirmed\n    const tx: ConfirmedTransaction = {\n      type: TransactionType.confirmed,\n      ...status,\n      receipt\n    }\n    return tx\n  }\n\n  /**\n   * Wait retryAttemps * TRANSACTION_FETCH_DELAY for a transaction status to be in the mempool\n   * @param txId - Transaction id to watch\n   * @param retryAttemps - Number of retries when a transaction status returns empty\n   */\n  async isTxDropped(txId: string, _retryAttemps: number = 15): Promise<boolean> {\n    let retryAttemps = _retryAttemps\n\n    while (retryAttemps > 0) {\n      const tx = await this.getTransactionAndReceipt(txId)\n\n      if (tx !== null) {\n        return false\n      }\n\n      retryAttemps -= 1\n      await sleep(TRANSACTION_FETCH_DELAY)\n    }\n\n    return true\n  }\n\n  /**\n   * Get the transaction status and receipt\n   * @param txId - Transaction id\n   */\n  // prettier-ignore\n  async getTransactionAndReceipt(txId: string): Promise<TransactionAndReceipt> {\n    const [tx, receipt] = await Promise.all([\n      this.eth_getTransactionByHash(txId),\n      this.eth_getTransactionReceipt(txId)\n    ])\n\n    return tx ? { ...tx, receipt } : null\n  }\n\n  /**\n   * Expects the result of getTransaction's geth command and returns true if the transaction is still pending.\n   * It'll also check for a pending status prop against TRANSACTION_STATUS\n   * @param tx - The transaction object\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n  isPending(tx: TransactionAndReceipt): boolean {\n    return tx && tx.blockNumber === null\n  }\n\n  /**\n   * Expects the result of getTransactionRecepeit's geth command and returns true if the transaction failed.\n   * It'll also check for a failed status prop against TRANSACTION_STATUS\n   * @param tx - The transaction object\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n  isFailure(tx: TransactionAndReceipt): boolean {\n    return tx && (!tx.receipt || tx.receipt.status === 0)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from '../utils/utils'\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nexport class SolidityParam {\n  value\n  offset: number = undefined\n\n  constructor(value, offset: number = undefined) {\n    this.value = value || ''\n    this.offset = offset // offset bytes\n  }\n\n  /**\n   * This method should be called to check if param has dynamic size.\n   * If it has, it returns true, otherwise false\n   *\n   * @method isDynamic\n   * @returns {Boolean}\n   */\n  isDynamic() {\n    return this.offset !== undefined\n  }\n\n  /**\n   * This method should be called to transform offset to bytes\n   *\n   * @method offsetAsBytes\n   * @returns {string} bytes representation of offset\n   */\n  offsetAsBytes() {\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64)\n  }\n\n  /**\n   * This method should be called to get static part of param\n   *\n   * @method staticPart\n   * @returns {string} offset if it is a dynamic param, otherwise value\n   */\n  staticPart() {\n    if (!this.isDynamic()) {\n      return this.value\n    }\n    return this.offsetAsBytes()\n  }\n\n  /**\n   * This method should be called to get dynamic part of param\n   *\n   * @method dynamicPart\n   * @returns {string} returns a value if it is a dynamic param, otherwise empty string\n   */\n  dynamicPart() {\n    return this.isDynamic() ? this.value : ''\n  }\n\n  /**\n   * This method should be called to encode param\n   *\n   * @method encode\n   * @returns {string}\n   */\n  encode() {\n    return this.staticPart() + this.dynamicPart()\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport BigNumber from 'bignumber.js'\nimport * as utils from '../utils/utils'\nimport * as config from '../utils/config'\nimport { SolidityParam } from './param'\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n */\nexport function formatInputInt(value: string | number | BigNumber) {\n  BigNumber.config(config.ETH_BIGNUMBER_ROUNDING_MODE)\n  let result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64)\n  return new SolidityParam(result)\n}\n\n/**\n * Formats input bytes\n */\nexport function formatInputBytes(value: string) {\n  let result = utils.toHex(value).substr(2)\n  let l = Math.floor((result.length + 63) / 64)\n  result = utils.padRight(result, l * 64)\n  return new SolidityParam(result)\n}\n\n/**\n * Formats input bytes\n */\nexport function formatInputDynamicBytes(value: string) {\n  let result = utils.toHex(value).substr(2)\n  let length = result.length / 2\n  let l = Math.floor((result.length + 63) / 64)\n  result = utils.padRight(result, l * 64)\n  return new SolidityParam(formatInputInt(length).value + result)\n}\n\n/**\n * Formats input value to byte representation of string\n */\nexport function formatInputString(value: string) {\n  let result = utils.fromUtf8(value).substr(2)\n  let length = result.length / 2\n  let l = Math.floor((result.length + 63) / 64)\n  result = utils.padRight(result, l * 64)\n  return new SolidityParam(formatInputInt(length).value + result)\n}\n\n/**\n * Formats input value to byte representation of bool\n */\nexport function formatInputBool(value: boolean) {\n  let result = '000000000000000000000000000000000000000000000000000000000000000' + (value ? '1' : '0')\n  return new SolidityParam(result)\n}\n\n/**\n * Formats input value to byte representation of real\n * Values are multiplied by 2^m and encoded as integers\n */\nexport function formatInputReal(value: string | number) {\n  return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)))\n}\n\n/**\n * Check if input value is negative\n *\n * @param value - The value is hex format\n */\nexport function signedIsNegative(value: string) {\n  return new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1) === '1'\n}\n\n/**\n * Formats right-aligned output bytes to int\n */\nexport function formatOutputInt(param): BigNumber {\n  let value = param.staticPart() || '0'\n\n  // check if it's negative number\n  // it it is, return two's complement\n  if (signedIsNegative(value)) {\n    return new BigNumber(value, 16)\n      .minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16))\n      .minus(1)\n  }\n  return new BigNumber(value, 16)\n}\n\n/**\n * Formats right-aligned output bytes to uint\n */\nexport function formatOutputUInt(param: any) {\n  let value = param.staticPart() || '0'\n  return new BigNumber(value, 16)\n}\n\n/**\n * Formats right-aligned output bytes to real\n */\nexport function formatOutputReal(param: any) {\n  return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128))\n}\n\n/**\n * Formats right-aligned output bytes to ureal\n */\nexport function formatOutputUReal(param: any) {\n  return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128))\n}\n\n/**\n * Should be used to format output bool\n */\nexport function formatOutputBool(param: any) {\n  return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false\n}\n\n/**\n * Should be used to format output bytes\n *\n * @param param - The left-aligned hex representation of string\n * @param name - The type name\n */\nexport function formatOutputBytes(param: any, name: string) {\n  let matches = name.match(/^bytes([0-9]*)/)\n  let size = parseInt(matches[1], 10)\n  return '0x' + param.staticPart().slice(0, 2 * size)\n}\n\n/**\n * Should be used to format output bytes\n *\n * @param param - The left-aligned hex representation of string\n */\nexport function formatOutputDynamicBytes(param: any) {\n  let length = new BigNumber(param.dynamicPart().slice(0, 64), 16).toNumber() * 2\n  return '0x' + param.dynamicPart().substr(64, length)\n}\n\n/**\n * Should be used to format output string\n *\n * @param param - The left-aligned hex representation of string\n */\nexport function formatOutputString(param: any) {\n  let length = new BigNumber(param.dynamicPart().slice(0, 64), 16).toNumber() * 2\n  return utils.toUtf8(param.dynamicPart().substr(64, length))\n}\n\n/**\n * Should be used to format output address\n *\n * @param param - The right-aligned input bytes\n */\nexport function formatOutputAddress(param: any) {\n  let value = param.staticPart()\n  return '0x' + value.slice(value.length - 40, value.length)\n}\n","import * as f from './formatters'\nimport { SolidityParam } from './param'\n\n/**\n * SolidityType prototype is used to encode/decode solidity params of certain type\n */\nexport class SolidityType {\n  _inputFormatter\n  _outputFormatter\n\n  constructor(config: { inputFormatter; outputFormatter }) {\n    this._inputFormatter = config.inputFormatter\n    this._outputFormatter = config.outputFormatter\n  }\n\n  /**\n   * Should be used to determine if this SolidityType do match given name\n   *\n   * @method isType\n   * @param {string} name\n   * @return {Bool} true if type match this SolidityType, otherwise false\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name: string) {\n    throw new Error('this method should be overrwritten for type ' + name)\n  }\n\n  /**\n   * Should be used to determine what is the length of static part in given type\n   *\n   * @method staticPartLength\n   * @param {string} name\n   * @return {number} length of static part in bytes\n   */\n  staticPartLength(name: string) {\n    // If name isn't an array then treat it like a single element array.\n    return (this.nestedTypes(name) || ['[1]'])\n      .map(function(type) {\n        // the length of the nested array\n        return parseInt(type.slice(1, -1), 10) || 1\n      })\n      .reduce(function(previous, current) {\n        return previous * current\n        // all basic types are 32 bytes long\n      }, 32)\n  }\n\n  /**\n   * Should be used to determine if type is dynamic array\n   * eg:\n   * \"type[]\" => true\n   * \"type[4]\" => false\n   *\n   * @method isDynamicArray\n   * @param {string} name\n   * @return {bool} true if the type is dynamic array\n   */\n  isDynamicArray(name: string): boolean {\n    let nestedTypes = this.nestedTypes(name)\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g)\n  }\n\n  /**\n   * Should be used to determine if type is static array\n   * eg:\n   * \"type[]\" => false\n   * \"type[4]\" => true\n   *\n   * @method isStaticArray\n   * @param {string} name\n   * @return {Bool} true if the type is static array\n   */\n  isStaticArray(name: string): boolean {\n    let nestedTypes = this.nestedTypes(name)\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g)\n  }\n\n  /**\n   * Should return length of static array\n   * eg.\n   * \"int[32]\" => 32\n   * \"int256[14]\" => 14\n   * \"int[2][3]\" => 3\n   * \"int\" => 1\n   * \"int[1]\" => 1\n   * \"int[]\" => 1\n   *\n   * @method staticArrayLength\n   * @param {string} name\n   * @return {number} static array length\n   */\n  staticArrayLength(name: string): number {\n    let nestedTypes = this.nestedTypes(name)\n    if (nestedTypes) {\n      const match = nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g)\n\n      return parseInt(match[match.length - 1] || '1', 10)\n    }\n    return 1\n  }\n\n  /**\n   * Should return nested type\n   * eg.\n   * \"int[32]\" => \"int\"\n   * \"int256[14]\" => \"int256\"\n   * \"int[2][3]\" => \"int[2]\"\n   * \"int\" => \"int\"\n   * \"int[]\" => \"int\"\n   *\n   * @method nestedName\n   * @param {string} name\n   * @return {string} nested name\n   */\n  nestedName(name: string): string {\n    // remove last [] in name\n    let nestedTypes = this.nestedTypes(name)\n    if (!nestedTypes) {\n      return name\n    }\n\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length)\n  }\n\n  /**\n   * Should return true if type has dynamic size by default\n   * such types are \"string\", \"bytes\"\n   *\n   * @method isDynamicType\n   * @param {string} name\n   * @return {Bool} true if is dynamic, otherwise false\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n  isDynamicType(_?: string) {\n    return false\n  }\n\n  /**\n   * Should return array of nested types\n   * eg.\n   * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\n   * \"int[] => [\"[]\"]\n   * \"int\" => null\n   *\n   * @method nestedTypes\n   * @param {string} name\n   * @return {Array} array of nested types\n   */\n  // tslint:disable-next-line:prefer-function-over-method\n  nestedTypes(name: string): string[] {\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n    return name.match(/(\\[[0-9]*\\])/g)\n  }\n\n  /**\n   * Should be used to encode the value\n   *\n   * @method encode\n   * @param {object} value\n   * @param {string} name\n   * @return {string} encoded value\n   */\n  encode(value, name: string) {\n    if (this.isDynamicArray(name)) {\n      let length = value.length // in int\n      let nestedName = this.nestedName(name)\n\n      let result = []\n      result.push(f.formatInputInt(length).encode())\n\n      value.forEach(v => {\n        result.push(this.encode(v, nestedName))\n      })\n\n      return result\n    } else if (this.isStaticArray(name)) {\n      let length = this.staticArrayLength(name) // in int\n      let nestedName = this.nestedName(name)\n\n      let result = []\n      for (let i = 0; i < length; i++) {\n        result.push(this.encode(value[i], nestedName))\n      }\n\n      return result\n    }\n\n    return this._inputFormatter(value, name).encode()\n  }\n\n  /**\n   * Should be used to decode value from bytes\n   *\n   * @method decode\n   * @param {string} bytes\n   * @param {number} offset in bytes\n   * @param {string} name type name\n   * @returns {object} decoded value\n   */\n  decode(bytes: string, offset: number, name: string) {\n    if (this.isDynamicArray(name)) {\n      let arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64), 16) // in bytes\n      let length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64), 16) // in int\n      let arrayStart = arrayOffset + 32 // array starts after length; // in bytes\n\n      let nestedName = this.nestedName(name)\n      let nestedStaticPartLength = this.staticPartLength(nestedName) // in bytes\n      let roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32\n      let result = []\n\n      for (let i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n        result.push(this.decode(bytes, arrayStart + i, nestedName))\n      }\n\n      return result\n    } else if (this.isStaticArray(name)) {\n      let length = this.staticArrayLength(name) // in int\n      let arrayStart = offset // in bytes\n\n      let nestedName = this.nestedName(name)\n      let nestedStaticPartLength = this.staticPartLength(nestedName) // in bytes\n      let roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32\n      let result = []\n\n      for (let i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n        result.push(this.decode(bytes, arrayStart + i, nestedName))\n      }\n\n      return result\n    } else if (this.isDynamicType(name)) {\n      let dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64), 16) // in bytes\n      let length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64), 16) // in bytes\n      let roundedLength = Math.floor((length + 31) / 32) // in int\n      let param = new SolidityParam(bytes.substr(dynamicOffset * 2, (1 + roundedLength) * 64), 0)\n      return this._outputFormatter(param, name)\n    }\n\n    let length = this.staticPartLength(name)\n    let param = new SolidityParam(bytes.substr(offset * 2, length * 2))\n    return this._outputFormatter(param, name)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as formatter from './formatters'\n\nimport { SolidityTypeAddress } from './address'\nimport { SolidityTypeBool } from './bool'\nimport { SolidityTypeInt } from './int'\nimport { SolidityTypeUInt } from './uint'\nimport { SolidityTypeDynamicBytes } from './dynamicbytes'\nimport { SolidityTypeString } from './string'\nimport { SolidityTypeReal } from './real'\nimport { SolidityTypeUReal } from './ureal'\nimport { SolidityTypeBytes } from './bytes'\nimport { SolidityType } from './type'\n\nfunction isDynamic(solidityType: SolidityType, type) {\n  return solidityType.isDynamicType(type) || solidityType.isDynamicArray(type)\n}\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nexport class SolidityCoder {\n  _types: SolidityType[]\n\n  constructor(types: SolidityType[]) {\n    this._types = types\n  }\n\n  /**\n   * This method should be used to transform type to SolidityType\n   *\n   * @method _requireType\n   * @param {string} type\n   * @returns {SolidityType}\n   * @throws {Error} throws if no matching type is found\n   */\n  _requireType(type: string): SolidityType {\n    let solidityType = this._types.filter(function(t) {\n      return t.isType(type)\n    })[0]\n\n    if (!solidityType) {\n      throw Error('invalid solidity type!: ' + type)\n    }\n\n    return solidityType\n  }\n\n  /**\n   * Should be used to encode plain param\n   *\n   * @method encodeParam\n   * @param {string} type\n   * @param {object} plain param\n   * @return {string} encoded plain param\n   */\n  encodeParam(type: string, param) {\n    return this.encodeParams([type], [param])\n  }\n\n  /**\n   * Should be used to encode list of params\n   *\n   * @method encodeParams\n   * @param {Array} types\n   * @param {Array} params\n   * @return {string} encoded list of params\n   */\n  encodeParams(types: string[], params: any[]) {\n    let solidityTypes = this.getSolidityTypes(types)\n\n    let encodeds = solidityTypes.map(function(solidityType, index) {\n      return solidityType.encode(params[index], types[index])\n    })\n\n    let dynamicOffset = solidityTypes.reduce(function(acc, solidityType, index) {\n      let staticPartLength = solidityType.staticPartLength(types[index])\n      let roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32\n\n      return acc + (isDynamic(solidityTypes[index], types[index]) ? 32 : roundedStaticPartLength)\n    }, 0)\n\n    let result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset)\n\n    return result\n  }\n\n  encodeMultiWithOffset(types: string[], solidityTypes: SolidityType[], encodeds, _dynamicOffset: number) {\n    let dynamicOffset = _dynamicOffset\n    let result = ''\n\n    types.forEach((_, i) => {\n      if (isDynamic(solidityTypes[i], types[i])) {\n        result += formatter.formatInputInt(dynamicOffset).encode()\n        let e = this.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset)\n        dynamicOffset += e.length / 2\n      } else {\n        // don't add length to dynamicOffset. it's already counted\n        result += this.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset)\n      }\n\n      // TODO: figure out nested arrays\n    })\n\n    types.forEach((_, i) => {\n      if (isDynamic(solidityTypes[i], types[i])) {\n        let e = this.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset)\n        dynamicOffset += e.length / 2\n        result += e\n      }\n    })\n    return result\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  encodeWithOffset(type: string, solidityType: SolidityType, encoded, offset: number) {\n    /* jshint maxcomplexity: 17 */\n    /* jshint maxdepth: 5 */\n\n    let encodingMode = { dynamic: 1, static: 2, other: 3 }\n\n    let mode = solidityType.isDynamicArray(type)\n      ? encodingMode.dynamic\n      : solidityType.isStaticArray(type)\n        ? encodingMode.static\n        : encodingMode.other\n\n    if (mode !== encodingMode.other) {\n      let nestedName = solidityType.nestedName(type)\n      let nestedStaticPartLength = solidityType.staticPartLength(nestedName)\n      let result = mode === encodingMode.dynamic ? encoded[0] : ''\n\n      if (solidityType.isDynamicArray(nestedName)) {\n        let previousLength = mode === encodingMode.dynamic ? 2 : 0\n\n        for (let i = 0; i < encoded.length; i++) {\n          // calculate length of previous item\n          if (mode === encodingMode.dynamic) {\n            previousLength += +encoded[i - 1][0] || 0\n          } else if (mode === encodingMode.static) {\n            previousLength += +(encoded[i - 1] || [])[0] || 0\n          }\n          result += formatter.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode()\n        }\n      }\n\n      let len = mode === encodingMode.dynamic ? encoded.length - 1 : encoded.length\n      for (let c = 0; c < len; c++) {\n        let additionalOffset = result / 2\n        if (mode === encodingMode.dynamic) {\n          result += this.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset + additionalOffset)\n        } else if (mode === encodingMode.static) {\n          result += this.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset)\n        }\n      }\n\n      return result\n    }\n\n    return encoded\n  }\n\n  /**\n   * Should be used to decode bytes to plain param\n   *\n   * @method decodeParam\n   * @param {string} type\n   * @param {string} bytes\n   * @return {object} plain param\n   */\n  decodeParam(type: string, bytes: string) {\n    return this.decodeParams([type], bytes)[0]\n  }\n\n  /**\n   * Should be used to decode list of params\n   *\n   * @method decodeParam\n   * @param {Array} types\n   * @param {string} bytes\n   * @return {Array} array of plain params\n   */\n  decodeParams(types: string[], bytes: string) {\n    let solidityTypes = this.getSolidityTypes(types)\n    let offsets = this.getOffsets(types, solidityTypes)\n\n    return solidityTypes.map(function(solidityType, index) {\n      return solidityType.decode(bytes, offsets[index], types[index])\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  getOffsets(types: string[], solidityTypes: SolidityType[]) {\n    let lengths = solidityTypes.map(function(solidityType, index) {\n      return solidityType.staticPartLength(types[index])\n    })\n\n    for (let i = 1; i < lengths.length; i++) {\n      // sum with length of previous element\n      lengths[i] += lengths[i - 1]\n    }\n\n    return lengths.map(function(length, index) {\n      // remove the current length, so the length is sum of previous elements\n      let staticPartLength = solidityTypes[index].staticPartLength(types[index])\n      return length - staticPartLength\n    })\n  }\n\n  getSolidityTypes(types: string[]): SolidityType[] {\n    return types.map(type => this._requireType(type))\n  }\n}\n\nexport const coder = new SolidityCoder([\n  new SolidityTypeAddress(),\n  new SolidityTypeBool(),\n  new SolidityTypeInt(),\n  new SolidityTypeUInt(),\n  new SolidityTypeDynamicBytes(),\n  new SolidityTypeBytes(),\n  new SolidityTypeString(),\n  new SolidityTypeReal(),\n  new SolidityTypeUReal()\n])\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\nexport class SolidityTypeAddress extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputInt,\n      outputFormatter: f.formatOutputAddress\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/address(\\[([0-9]*)\\])?/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeBool is a prootype that represents bool type\n * It matches:\n * bool\n * bool[]\n * bool[4]\n * bool[][]\n * bool[3][]\n * bool[][6][], ...\n */\nexport class SolidityTypeBool extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputBool,\n      outputFormatter: f.formatOutputBool\n    })\n  }\n  isType(name) {\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeInt is a prootype that represents int type\n * It matches:\n * int\n * int[]\n * int[4]\n * int[][]\n * int[3][]\n * int[][6][], ...\n * int32\n * int64[]\n * int8[4]\n * int256[][]\n * int[3][]\n * int64[][6][], ...\n */\nexport class SolidityTypeInt extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputInt,\n      outputFormatter: f.formatOutputInt\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeUInt is a prootype that represents uint type\n * It matches:\n * uint\n * uint[]\n * uint[4]\n * uint[][]\n * uint[3][]\n * uint[][6][], ...\n * uint32\n * uint64[]\n * uint8[4]\n * uint256[][]\n * uint[3][]\n * uint64[][6][], ...\n */\nexport class SolidityTypeUInt extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputInt,\n      outputFormatter: f.formatOutputUInt\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\nexport class SolidityTypeDynamicBytes extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputDynamicBytes,\n      outputFormatter: f.formatOutputDynamicBytes\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/)\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isDynamicType() {\n    return true\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\nexport class SolidityTypeBytes extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputBytes,\n      outputFormatter: f.formatOutputBytes\n    })\n  }\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\nexport class SolidityTypeString extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputString,\n      outputFormatter: f.formatOutputString\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name: string) {\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/)\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isDynamicType() {\n    return true\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeReal is a prootype that represents real type\n * It matches:\n * real\n * real[]\n * real[4]\n * real[][]\n * real[3][]\n * real[][6][], ...\n * real32\n * real64[]\n * real8[4]\n * real256[][]\n * real[3][]\n * real64[][6][], ...\n */\nexport class SolidityTypeReal extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputReal,\n      outputFormatter: f.formatOutputReal\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/)\n  }\n}\n","import * as f from './formatters'\nimport { SolidityType } from './type'\n\n/**\n * SolidityTypeUReal is a prootype that represents ureal type\n * It matches:\n * ureal\n * ureal[]\n * ureal[4]\n * ureal[][]\n * ureal[3][]\n * ureal[][6][], ...\n * ureal32\n * ureal64[]\n * ureal8[4]\n * ureal256[][]\n * ureal[3][]\n * ureal64[][6][], ...\n */\nexport class SolidityTypeUReal extends SolidityType {\n  constructor() {\n    super({\n      inputFormatter: f.formatInputReal,\n      outputFormatter: f.formatOutputUReal\n    })\n  }\n\n  // tslint:disable-next-line:prefer-function-over-method\n  isType(name) {\n    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from './utils/utils'\nimport * as formatters from './utils/formatters'\nimport * as errors from './utils/errors'\n\nimport { coder } from './solidity/coder'\nimport { RequestManager } from './RequestManager'\nimport { Contract } from '.'\n\n/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\nexport class SolidityFunction {\n  _address: string\n  _inputTypes: string[]\n  _outputTypes: string[]\n  _constant: boolean\n  _name: string\n  _payable: boolean\n\n  needsToBeTransaction: boolean\n\n  constructor(public requestManager: RequestManager, public json, address: string) {\n    this._inputTypes = json.inputs.map(function(i) {\n      return i.type\n    })\n    this._outputTypes = json.outputs.map(function(i) {\n      return i.type\n    })\n\n    this._constant = json.constant\n    this._payable = json.payable\n\n    this.needsToBeTransaction =\n      ('payable' in json && json.payable) ||\n      ('constant' in json && !json.constant) ||\n      ('stateMutability' in json && json.stateMutability === 'nonpayable')\n\n    this._name = utils.transformToFullName(json)\n    this._address = address\n  }\n\n  extractDefaultBlock(args: any[]): string {\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {\n      return formatters.inputDefaultBlockNumberFormatter(args.pop()) // modify the args array!\n    }\n  }\n\n  /**\n   * Should be called to check if the number of arguments is correct\n   *\n   * @param arguments - An array of arguments\n   */\n  validateArgs(args: any[]) {\n    if (args.some($ => typeof $ === 'undefined')) {\n      throw new Error('Invalid call, some arguments are undefined')\n    }\n\n    let inputArgs = args.filter(function(a) {\n      // filter the options object but not arguments that are arrays\n      return !(utils.isObject(a) === true && utils.isArray(a) === false && utils.isBigNumber(a) === false)\n    })\n    if (inputArgs.length !== this._inputTypes.length) {\n      throw errors.InvalidNumberOfSolidityArgs(inputArgs.length, this._inputTypes.length)\n    }\n  }\n\n  /**\n   * Should be used to create payload from arguments\n   *\n   * @param solidity - function params\n   * @param optional - payload options\n   */\n  toPayload(args: any[]) {\n    let options = {\n      to: undefined,\n      data: undefined,\n      value: undefined,\n      from: undefined\n    }\n\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {\n      options = args[args.length - 1]\n    }\n\n    this.validateArgs(args)\n\n    options.to = this._address\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args)\n\n    return options\n  }\n\n  /**\n   * Should be used to get function signature\n   */\n  signature(): string {\n    return utils.sha3(this._name).slice(0, 8)\n  }\n\n  unpackOutput(output: string) {\n    if (!output) {\n      return\n    }\n\n    const encodedOutput = output.length >= 2 ? output.slice(2) : output\n    let result = coder.decodeParams(this._outputTypes, encodedOutput)\n    return result.length === 1 ? result[0] : result\n  }\n\n  /**\n   * Calls a contract function or to sendTransaction to solidity function\n   *\n   * @param requestManager - The RequestManager instance\n   */\n  async execute(requestManager: RequestManager, ...args: any[]) {\n    if (!requestManager) {\n      throw new Error(`Cannot call function ${this.displayName()} because there is no requestManager`)\n    }\n\n    if (this.needsToBeTransaction) {\n      const payload = this.toPayload(args)\n      if (payload.value > 0 && !this._payable) {\n        throw new Error('Cannot send value to non-payable function')\n      }\n      if (!payload.from) {\n        throw new Error('Missing \"from\" in transaction options')\n      }\n      const txHash = await requestManager.eth_sendTransaction(payload)\n      return txHash\n    } else {\n      const defaultBlock = this.extractDefaultBlock(args)\n      const payload = this.toPayload(args)\n      const output = await requestManager.eth_call(payload, defaultBlock)\n      return this.unpackOutput(output)\n    }\n  }\n\n  /**\n   * Should be used to estimateGas of solidity function\n   */\n  estimateGas(...args) {\n    let payload = this.toPayload(args)\n\n    return this.requestManager.eth_estimateGas(payload)\n  }\n\n  /**\n   * Return the encoded data of the call\n   */\n  getData(...args: any[]): string {\n    let payload = this.toPayload(args)\n\n    return payload.data\n  }\n\n  /**\n   * Should be used to get function display name\n   */\n  displayName(): string {\n    return utils.extractDisplayName(this._name)\n  }\n\n  /**\n   * Should be used to get function type name\n   */\n  typeName(): string {\n    return utils.extractTypeName(this._name) || 'void'\n  }\n\n  /**\n   * Should be called to attach function to contract\n   *\n   * @param contract - The contract instance\n   */\n  attachToContract(contract: Contract) {\n    let displayName = this.displayName()\n    const fun = this\n\n    const execute = Object.assign(\n      function(...args) {\n        const requestManager = this.requestManager || fun.requestManager\n\n        return fun.execute(requestManager, ...args)\n      },\n      { estimateGas: this.estimateGas.bind(this) }\n    )\n\n    if (!contract[displayName]) {\n      contract[displayName] = execute\n    }\n\n    contract[displayName][this.typeName()] = execute\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from './utils/utils'\nimport * as formatters from './utils/formatters'\nimport { RequestManager } from './RequestManager'\nimport * as config from './utils/config'\nimport { FilterOptions, FilterChange, TxHash, SHHFilterOptions, Data, SHHFilterMessage } from './Schema'\nimport { future, IFuture } from 'fp-future'\n\nfunction safeAsync(fn: () => Promise<any>) {\n  return function() {\n    // tslint:disable-next-line:no-console\n    fn().catch($ => console.error($))\n  }\n}\n\n/**\n * Converts a given topic to a hex string, but also allows null values.\n *\n * @param value - The given value\n */\nfunction toTopic(value: any): string {\n  if (value === null || typeof value === 'undefined') return null\n\n  const strValue = String(value).toString()\n\n  if (strValue.indexOf('0x') === 0) return strValue\n  else return utils.fromUtf8(strValue)\n}\n\nexport type FilterCallback = (messages: FilterChange[] | string[]) => void\n\nexport abstract class AbstractFilter<T> {\n  public isStarted = false\n  public isDisposed = false\n\n  public formatter: (x) => T\n\n  protected filterId: IFuture<Data> = future()\n  protected callbacks: ((message: T) => void)[] = []\n  protected stopSemaphore = future()\n\n  constructor(public requestManager: RequestManager) {\n    // stub\n  }\n\n  async watch(callback: (message: T) => void) {\n    if (this.isDisposed) throw new Error('The filter was disposed')\n    if (callback) {\n      this.callbacks.push(callback)\n\n      if (!this.isStarted) {\n        await this.start()\n      }\n    }\n  }\n\n  async start() {\n    if (this.isDisposed) throw new Error('The filter was disposed')\n    if (this.isStarted) return\n\n    this.isStarted = true\n\n    try {\n      const id = await this.getNewFilter()\n\n      if (!id) {\n        throw new Error('Could not create a filter, response: ' + JSON.stringify(id))\n      }\n\n      this.filterId.resolve(id)\n    } catch (e) {\n      throw e\n    }\n\n    this.stopSemaphore = future()\n    await this.poll()\n  }\n\n  async stop() {\n    if (!this.isStarted) return\n    if (this.isDisposed) return\n\n    this.isDisposed = true\n\n    const filterId = await this.filterId\n\n    this.isStarted = false\n\n    if (this.stopSemaphore) await this.stopSemaphore\n\n    const didStop = await this.uninstall()\n\n    if (didStop !== true) {\n      throw new Error(`Couldn't stop the eth filter: ${filterId}`)\n    }\n  }\n\n  protected abstract getNewFilter(): Promise<Data>\n  protected abstract getChanges(): Promise<any>\n  protected abstract uninstall(): Promise<any>\n\n  /**\n   * Adds the callback and sets up the methods, to iterate over the results.\n   */\n  private async poll() {\n    if (this.isStarted) {\n      if (this.callbacks.length) {\n        const result: any[] = await this.getChanges()\n\n        this.callbacks.forEach(cb => {\n          if (this.formatter) {\n            result.forEach($ => {\n              cb(this.formatter($))\n            })\n          } else {\n            result.forEach($ => cb($))\n          }\n        })\n      }\n\n      this.stopSemaphore.resolve(1)\n\n      if (this.isStarted) {\n        this.stopSemaphore = future()\n        setTimeout(safeAsync(() => this.poll()), config.ETH_POLLING_TIMEOUT)\n      }\n    } else {\n      this.stopSemaphore.resolve(1)\n    }\n  }\n}\n\nexport class SHHFilter extends AbstractFilter<SHHFilterMessage> {\n  constructor(public requestManager: RequestManager, public options: SHHFilterOptions) {\n    super(requestManager)\n\n    this.options = this.options || { topics: [] }\n    this.options.topics = this.options.topics || []\n    this.options.topics = this.options.topics.map(function(topic) {\n      return toTopic(topic)\n    })\n\n    this.options = {\n      topics: this.options.topics,\n      to: this.options.to\n    }\n  }\n\n  async getMessages(): Promise<any> {\n    const filterId = await this.filterId\n    return this.requestManager.shh_getMessages(filterId)\n  }\n\n  protected async getNewFilter(): Promise<string> {\n    return this.requestManager.shh_newFilter(this.options)\n  }\n\n  protected async getChanges(): Promise<any> {\n    const filterId = await this.filterId\n    return this.requestManager.shh_getFilterChanges(filterId)\n  }\n\n  protected async uninstall(): Promise<any> {\n    const filterId = await this.filterId\n    return this.requestManager.shh_uninstallFilter(filterId)\n  }\n}\n\nexport class EthFilter<T = FilterChange | string> extends AbstractFilter<T> {\n  constructor(\n    public requestManager: RequestManager,\n    public options: FilterOptions,\n    public formatter: (message: FilterChange | string) => T = x => x as any\n  ) {\n    super(requestManager)\n    this.options = this.options || {}\n    this.options.topics = this.options.topics || []\n    this.options.topics = this.options.topics.map(function(topic) {\n      return toTopic(topic)\n    })\n\n    this.options = {\n      topics: this.options.topics,\n      address: this.options.address ? this.options.address : undefined,\n      fromBlock:\n        typeof this.options.fromBlock === 'number' || typeof this.options.fromBlock === 'string'\n          ? formatters.inputBlockNumberFormatter(this.options.fromBlock)\n          : 'latest',\n      toBlock:\n        typeof this.options.toBlock === 'number' || typeof this.options.toBlock === 'string'\n          ? formatters.inputBlockNumberFormatter(this.options.toBlock)\n          : 'latest'\n    }\n  }\n\n  async getLogs() {\n    if (!this.isStarted) {\n      await this.start()\n    }\n    const filterId = await this.filterId\n\n    return this.requestManager.eth_getFilterLogs(filterId)\n  }\n\n  protected async getNewFilter(): Promise<any> {\n    return this.requestManager.eth_newFilter(this.options)\n  }\n\n  protected async getChanges(): Promise<any> {\n    const filterId = await this.filterId\n    return this.requestManager.eth_getFilterChanges(filterId)\n  }\n\n  protected async uninstall(): Promise<any> {\n    const filterId = await this.filterId\n    return this.requestManager.eth_uninstallFilter(filterId)\n  }\n}\n\nexport class EthPendingTransactionFilter extends EthFilter<TxHash> {\n  constructor(requestManager: RequestManager) {\n    super(requestManager, null, arg => arg as TxHash)\n  }\n  async getNewFilter() {\n    return this.requestManager.eth_newPendingTransactionFilter()\n  }\n}\n\nexport class EthBlockFilter extends EthFilter<TxHash> {\n  constructor(requestManager: RequestManager) {\n    super(requestManager, null, arg => arg as TxHash)\n  }\n\n  async getNewFilter() {\n    return this.requestManager.eth_newBlockFilter()\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file event.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nimport * as utils from './utils/utils'\nimport * as formatters from './utils/formatters'\n\nimport { coder } from './solidity/coder'\nimport { RequestManager } from './RequestManager'\nimport { Contract } from './Contract'\nimport { EthFilter } from './Filter'\nimport { FilterOptions } from './Schema'\n\n/**\n * This prototype should be used to create event filters\n */\nexport class SolidityEvent {\n  _anonymous: boolean = false\n  _name: string\n  _params: any[]\n\n  constructor(\n    public requestManager: RequestManager,\n    json: { inputs: any[]; anonymous; name: string },\n    public address: string\n  ) {\n    this._params = json.inputs\n    this._name = utils.transformToFullName(json)\n    this._anonymous = json.anonymous\n  }\n\n  /**\n   * Should be used to get filtered param types\n   *\n   * @param decide - True if returned typed should be indexed\n   */\n  types(indexed): string[] {\n    return this._params\n      .filter(function(i) {\n        return i.indexed === indexed\n      })\n      .map(function(i) {\n        return i.type\n      })\n  }\n\n  /**\n   * Should be used to get event display name\n   */\n  displayName(): string {\n    return utils.extractDisplayName(this._name)\n  }\n\n  /**\n   * Should be used to get event type name\n   */\n  typeName(): string {\n    return utils.extractTypeName(this._name) || 'void'\n  }\n\n  /**\n   * Should be used to get event signature\n   */\n  signature(): string {\n    return utils.sha3(this._name)\n  }\n\n  /**\n   * Should be used to encode indexed params and options to one final object\n   *\n   * @param {object} indexed\n   * @param {object} options\n   */\n  encode(indexed: Record<string, any> = {}, options: FilterOptions = {}): { topics: string[]; address: string } {\n    let result = {\n      topics: [],\n      address: this.address\n    }\n    ;['fromBlock', 'toBlock']\n      .filter(function(f) {\n        return options[f] !== undefined\n      })\n      .forEach(function(f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f])\n      })\n\n    if (!this._anonymous) {\n      result.topics.push('0x' + this.signature())\n    }\n\n    let indexedTopics = this._params\n      .filter(function(i) {\n        return i.indexed === true\n      })\n      .map(function(i) {\n        let value = indexed[i.name]\n        if (value === undefined || value === null) {\n          return null\n        }\n\n        if (utils.isArray(value)) {\n          return value.map(function(v) {\n            return '0x' + coder.encodeParam(i.type, v)\n          })\n        }\n        return '0x' + coder.encodeParam(i.type, value)\n      })\n\n    result.topics = result.topics.concat(indexedTopics)\n\n    return result\n  }\n\n  /**\n   * Should be used to decode indexed params and options\n   *\n   * @param {object} data\n   */\n  decode(data: {\n    data: string\n    topics?: string[]\n    address: string\n  }): { event: string; address: string; args: string[] } {\n    data.data = data.data || ''\n    data.topics = data.topics || []\n\n    let argTopics = this._anonymous ? data.topics : data.topics.slice(1)\n    let indexedData = argTopics\n      .map(function(topics) {\n        return topics.slice(2)\n      })\n      .join('')\n    let indexedParams = coder.decodeParams(this.types(true), indexedData)\n\n    let notIndexedData = data.data.slice(2)\n    let notIndexedParams = coder.decodeParams(this.types(false), notIndexedData)\n\n    let result = formatters.outputLogFormatter(data)\n    result.event = this.displayName()\n    result.address = data.address\n\n    result.args = this._params.reduce(function(acc, current) {\n      acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift()\n      return acc\n    }, {})\n\n    delete result.data\n    delete result.topics\n\n    return result\n  }\n\n  /**\n   * Should be used to create new filter object from event\n   *\n   * @param {object} indexed\n   * @param {object} options\n   */\n  async execute(indexed: Record<string, any>, options: FilterOptions): Promise<EthFilter> {\n    let o = this.encode(indexed, options)\n    let formatter = this.decode.bind(this)\n    return new EthFilter(this.requestManager, o, formatter)\n  }\n\n  /**\n   * Should be used to attach event to contract object\n   *\n   * @method attachToContract\n   * @param {Contract}\n   */\n  attachToContract(contract: Contract) {\n    let execute = this.execute.bind(this)\n    let displayName = this.displayName()\n    if (!contract.events[displayName]) {\n      contract.events[displayName] = execute\n    }\n    contract.events[displayName][this.typeName()] = this.execute.bind(this, contract)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from './utils/utils'\nimport * as formatters from './utils/formatters'\n\nimport { SolidityEvent } from './SolidityEvent'\nimport { RequestManager } from './RequestManager'\nimport { Contract } from './Contract'\nimport { EthFilter } from './Filter'\nimport { FilterOptions } from './Schema'\n\nexport type EventData = {\n  data: string\n  topics: string[]\n  address: string\n}\n\nexport class AllSolidityEvents {\n  constructor(public _requestManager: RequestManager, public _json, public _address: string) {}\n\n  encode(options: { fromBlock?; toBlock? } = {}) {\n    let result = {\n      address: this._address\n    }\n    ;['fromBlock', 'toBlock']\n      .filter(function(f) {\n        return options[f] !== undefined\n      })\n      .forEach(function(f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f])\n      })\n\n    return result\n  }\n\n  decode(data: EventData) {\n    data.data = data.data || ''\n\n    let eventTopic = utils.isArray(data.topics) && utils.isString(data.topics[0]) ? data.topics[0].slice(2) : ''\n\n    let match = this._json.filter(function(j) {\n      return eventTopic === utils.sha3(utils.transformToFullName(j))\n    })[0]\n\n    if (!match) {\n      // cannot find matching event?\n      return formatters.outputLogFormatter(data)\n    }\n\n    let event = new SolidityEvent(this._requestManager, match, this._address)\n    return event.decode(data)\n  }\n\n  async execute(options: FilterOptions) {\n    let filterOptions = this.encode(options)\n    let formatter = this.decode.bind(this)\n    return new EthFilter<any>(this._requestManager, filterOptions, formatter)\n  }\n\n  attachToContract(contract: Contract) {\n    let execute = this.execute.bind(this)\n    contract.allEvents = execute\n  }\n}\n","import { RequestManager } from './RequestManager'\nimport { SolidityFunction } from './SolidityFunction'\nimport { SolidityEvent } from './SolidityEvent'\nimport { AllSolidityEvents } from './AllSolidityEvents'\nimport { EthFilter } from './Filter'\nimport { FilterOptions } from './Schema'\n\n/**\n * Should be called to add functions to contract object\n *\n * @param contract - The contract instance\n */\nfunction addFunctionsToContract(contract: Contract) {\n  contract.abi\n    .filter(function(json) {\n      return json.type === 'function'\n    })\n    .map(function(json) {\n      return new SolidityFunction(contract.requestManager, json, contract.address)\n    })\n    .forEach(function(f) {\n      f.attachToContract(contract)\n    })\n}\n\n/**\n * Should be called to add events to contract object\n *\n * @param contract - The contract instance\n */\nfunction addEventsToContract(contract: Contract) {\n  let events = contract.abi.filter(function(json) {\n    return json.type === 'event'\n  })\n\n  let allEvents = new AllSolidityEvents(contract.requestManager, events, contract.address)\n\n  allEvents.attachToContract(contract)\n\n  events\n    .map(function(json) {\n      return new SolidityEvent(contract.requestManager, json, contract.address)\n    })\n    .forEach(function(e) {\n      e.attachToContract(contract)\n    })\n}\n\n/**\n * @public\n */\nexport type EventFilterCreator = (indexed: { [key: string]: any }, options?: FilterOptions) => Promise<EthFilter>\n\n/**\n * @public\n * Should be called to create new contract instance\n */\nexport class Contract {\n  allEvents: (options: FilterOptions) => Promise<EthFilter>\n\n  events: { [key: string]: EventFilterCreator } = {}\n\n  transactionHash: string = null\n\n  constructor(public requestManager: RequestManager, public abi: any[], public address: string) {\n    this.transactionHash = null\n    this.address = address\n    this.abi = abi\n\n    // this functions are not part of prototype,\n    // because we dont want to spoil the interface\n    addFunctionsToContract(this)\n    addEventsToContract(this)\n  }\n}\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file contract.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nimport * as utils from './utils/utils'\nimport { coder } from './solidity/coder'\nimport { RequestManager } from './RequestManager'\nimport { Contract } from './Contract'\nimport { future } from 'fp-future'\nimport { TransactionOptions, TxHash, Data } from './Schema'\n\n/**\n * Should be called to check if the contract gets properly deployed on the blockchain.\n * @param requestManager - The reference to a RequestManager instance\n */\nasync function checkForContractAddress(requestManager: RequestManager, txId: TxHash): Promise<string> {\n  const receiptFuture = future()\n\n  let count = 0\n\n  const fetcher = () => {\n    count++\n    // stop watching after 50 blocks (timeout)\n    if (count > 50) {\n      receiptFuture.reject(new Error(\"Contract transaction couldn't be found after 50 blocks\"))\n    } else {\n      requestManager.eth_getTransactionReceipt(txId).then(\n        receipt => {\n          if (receipt && receipt.blockHash) {\n            receiptFuture.resolve(receipt)\n          } else {\n            setTimeout(fetcher, 1000)\n          }\n        },\n        /* istanbul ignore next */\n        error => receiptFuture.reject(error)\n      )\n    }\n  }\n\n  fetcher()\n\n  const receipt = await receiptFuture\n  const code = await requestManager.eth_getCode(receipt.contractAddress, 'latest')\n\n  if (code.length > 3) {\n    return receipt.contractAddress\n  }\n\n  /* istanbul ignore next */\n  throw Object.assign(new Error(\"The contract code couldn't be stored, please check your gas amount.\"), {\n    response: code,\n    receipt\n  })\n}\n\n/**\n * Should be called to encode constructor params\n * @param abi - The given contract ABI\n */\nfunction encodeConstructorParams(abi: any[], params: any[]) {\n  return (\n    abi\n      .filter(function(json) {\n        return json.type === 'constructor' && json.inputs.length === params.length\n      })\n      .map(function(json) {\n        return json.inputs.map(function(input) {\n          return input.type\n        })\n      })\n      .map(function(types) {\n        return coder.encodeParams(types, params)\n      })[0] || ''\n  )\n}\n\n/**\n * @public\n * Should be called to create new ContractFactory instance\n */\nexport class ContractFactory {\n  constructor(public requestManager: RequestManager, public abi: any[]) {}\n  /**\n   * Should be called to create new contract on a blockchain\n   */\n  async deploy(param1, param2, options: TransactionOptions): Promise<Contract>\n  async deploy(param1, options: TransactionOptions): Promise<Contract>\n  async deploy(options: TransactionOptions): Promise<Contract>\n  async deploy(...args) {\n    // parse arguments\n    let options: TransactionOptions\n\n    let last = args[args.length - 1]\n\n    if (utils.isObject(last) && !utils.isArray(last)) {\n      options = args.pop()\n    }\n\n    /* istanbul ignore if */\n    if (!options) {\n      throw new Error('Missing options object')\n    }\n\n    /* istanbul ignore if */\n    if (!options.data || typeof options.data !== 'string') {\n      throw new Error('Invalid options.data')\n    }\n\n    if (options.value > 0) {\n      let constructorAbi =\n        this.abi.filter(function(json) {\n          return json.type === 'constructor' && json.inputs.length === args.length\n        })[0] || {}\n\n      /* istanbul ignore if */\n      if (!constructorAbi.payable) {\n        throw new Error('Cannot send value to non-payable constructor')\n      }\n    }\n\n    let bytes = encodeConstructorParams(this.abi, args)\n    options.data += bytes\n\n    if (!options.gas) {\n      options.gas = await this.requestManager.eth_estimateGas(options)\n    }\n\n    // wait for the contract address and check if the code was deployed\n    const hash = await this.requestManager.eth_sendTransaction(options)\n\n    const address = await checkForContractAddress(this.requestManager, hash)\n    const contract = await this.at(address)\n    contract.transactionHash = hash\n\n    return contract\n  }\n\n  /**\n   * Should be called to get access to existing contract on a blockchain\n   *\n   * @param address - The contract address\n   */\n  async at(address: string): Promise<Contract> {\n    if (!utils.isAddress(address)) {\n      throw new TypeError(`Invalid address ${JSON.stringify(address)}`)\n    }\n    return new Contract(this.requestManager, this.abi, address)\n  }\n\n  /**\n   * Gets the data, which is data to deploy plus constructor params\n   */\n  async getData(...args: any[]): Promise<Data> {\n    let options = { data: undefined }\n\n    const last = args[args.length - 1]\n\n    if (utils.isObject(last) && !utils.isArray(last)) {\n      options = args.pop()\n    }\n\n    if (!options) {\n      throw new Error('Missing options object')\n    }\n\n    if (!options.data || typeof options.data !== 'string') {\n      throw new Error('Invalid options.data')\n    }\n\n    const bytes = encodeConstructorParams(this.abi, args)\n\n    options.data += bytes\n\n    return options.data\n  }\n}\n","import { RPCMessage, Callback, toRPC } from './common'\nexport { RPCMessage, Callback } from './common'\n\nexport type HTTPProviderOptions = {\n  headers?: { [key: string]: string }\n  timeout?: number\n}\n\n/**\n * @public\n *\n * HttpProvider should be used to send rpc calls over http\n */\nexport class HTTPProvider {\n  debug = false\n\n  constructor(public host: string, public options: HTTPProviderOptions = {}) {\n    this.host = host || 'http://localhost:8545'\n  }\n\n  /* istanbul ignore next */\n  // tslint:disable-next-line:prefer-function-over-method\n  send() {\n    /* istanbul ignore next */\n    throw new Error('Sync requests are deprecated')\n  }\n\n  /**\n   * Should be used to make async request\n   */\n  sendAsync(payload: RPCMessage | RPCMessage[], callback: Callback) {\n    try {\n      let toSend = null\n\n      if (payload instanceof Array) {\n        toSend = payload.map($ => toRPC($))\n      } else {\n        toSend = toRPC(payload)\n      }\n\n      /* istanbul ignore if */\n      if (typeof fetch === 'undefined') {\n        throw new Error('There is no global fetch object. Please install and import isomorphic-fetch')\n      }\n\n      const params: RequestInit = {\n        body: JSON.stringify(toSend),\n        method: 'POST',\n        // mode: 'cors',\n        headers: {\n          ...this.options.headers,\n          'Content-Type': 'application/json'\n        }\n      }\n\n      /* istanbul ignore if */\n      // tslint:disable-next-line:no-console\n      if (this.debug) console.log('SEND >> ' + params.body)\n\n      fetch(this.host, params).then(\n        async $ => {\n          if (!$.ok) {\n            /* istanbul ignore if */\n            // tslint:disable-next-line:no-console\n            if (this.debug) console.log('ERR << ' + JSON.stringify($))\n            callback(new Error('External error. response code: ' + $.status))\n          } else {\n            const json = await $.json()\n            /* istanbul ignore if */\n            // tslint:disable-next-line:no-console\n            if (this.debug) console.log('RECV << ' + JSON.stringify(json))\n            if (json.error) {\n              callback(Object.assign(new Error(json.error.json || json.error), json.error))\n            } else {\n              callback(null, json)\n            }\n          }\n        },\n        err => {\n          /* istanbul ignore if */\n          // tslint:disable-next-line:no-console\n          if (this.debug) console.log('ERR << ' + JSON.stringify(err))\n          callback(err)\n        }\n      )\n    } catch (e) {\n      /* istanbul ignore if */\n      // tslint:disable-next-line:no-console\n      if (this.debug) console.log('ERR << ' + JSON.stringify(e))\n      callback(e)\n    }\n  }\n}\n","import { Callback, RPCMessage, toRPC } from './common'\nimport { IFuture, future } from 'fp-future'\n\nexport interface IWebSocket {\n  close()\n  send(s: any)\n}\n\nexport type WebSocketProviderOptions = {\n  /**\n   * WebSocketConstructor, used in Node.js where WebSocket is not globally available\n   */\n  WebSocketConstructor?: any\n\n  timeout?: number\n\n  protocol?: string\n}\n\n/**\n * @public\n */\nexport class WebSocketProvider<T extends IWebSocket> {\n  isDisposed = false\n\n  // @internal\n  responseCallbacks = new Map<number, IFuture<any>>()\n  // @internal\n  notificationCallbacks = new Set<Callback>()\n  connection: IFuture<T>\n\n  debug = false\n\n  private lastChunk: string = ''\n  private lastChunkTimeout: any\n\n  constructor(public url: string, public options: WebSocketProviderOptions = {}) {\n    this.connect()\n  }\n\n  dispose() {\n    this.isDisposed = true\n    const connection = this.connection\n    this.timeout(new Error('Provider disposed.'))\n    // tslint:disable-next-line:no-floating-promises\n    connection.then($ => $.close())\n  }\n\n  /* istanbul ignore next */\n  // tslint:disable-next-line:prefer-function-over-method\n  send() {\n    /* istanbul ignore next */\n    throw new Error('Sync requests are deprecated')\n  }\n\n  sendAsync(payload: RPCMessage | RPCMessage[], callback: Callback) {\n    const toSend: RPCMessage[] = []\n    let didFinish: Promise<any>\n    if (payload instanceof Array) {\n      didFinish = Promise.all(\n        payload.map($ => {\n          const defer = future<any>()\n\n          try {\n            const message = toRPC($)\n            toSend.push(message)\n            this.responseCallbacks.set(message.id, defer)\n          } catch (e) {\n            defer.reject(e)\n          }\n\n          return defer\n        })\n      )\n    } else {\n      const defer = future<any>()\n      try {\n        const message = toRPC(payload)\n        toSend.push(message)\n        this.responseCallbacks.set(message.id, defer)\n      } catch (e) {\n        defer.reject(e)\n      }\n      didFinish = defer\n    }\n\n    didFinish.then($ => callback(null, $), err => callback(err))\n\n    this.connection.then(\n      ws => {\n        toSend.forEach($ => {\n          const s = JSON.stringify($)\n\n          /* istanbul ignore if */\n          // tslint:disable-next-line:no-console\n          if (this.debug) console.log('SEND >> ' + s)\n          ws.send(s)\n        })\n      },\n      err => {\n        callback(err)\n      }\n    )\n  }\n\n  /**\n   * Will parse the response and make an array out of it.\n   */\n  private parseResponse(data: string) {\n    let returnValues = []\n\n    // DE-CHUNKER\n    let dechunkedData = data\n      .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n      .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n      .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n      .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n      .split('|--|')\n\n    dechunkedData.forEach(chunk => {\n      let data = chunk\n      // prepend the last chunk\n      if (this.lastChunk) {\n        data = this.lastChunk + data\n      }\n\n      let result = null\n\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        this.lastChunk = data\n\n        // start timeout to cancel all requests\n        clearTimeout(this.lastChunkTimeout)\n\n        this.lastChunkTimeout = setTimeout(() => {\n          this.timeout()\n        }, 1000 * 15)\n\n        return\n      }\n\n      // cancel timeout and set chunk to null\n      clearTimeout(this.lastChunkTimeout)\n      this.lastChunk = null\n\n      if (result) returnValues.push(result)\n    })\n\n    return returnValues\n  }\n\n  private processMessage(message) {\n    if ('id' in message) {\n      const id = message.id\n\n      const defer = this.responseCallbacks.get(id)\n\n      if (!defer) {\n        // tslint:disable-next-line:no-console\n        console.error('Error: Received a response for an unknown request', message)\n        return\n      }\n\n      this.responseCallbacks.delete(id)\n\n      if ('error' in message) {\n        defer.reject(Object.assign(new Error(message.error.message || message.error), message.error))\n      } else if ('result' in message) {\n        defer.resolve(message)\n      }\n    } else {\n      this.notificationCallbacks.forEach($ => $(null, message))\n    }\n  }\n\n  /**\n   * Timeout all requests when the end/error event is fired\n   */\n  private timeout(error?: Error) {\n    if (!this.connection || !this.connection.isPending) {\n      this.connection = future<T>()\n    }\n\n    const timeoutError = error || new Error('Connection timeout')\n    this.responseCallbacks.forEach($ => $.reject(timeoutError))\n    this.responseCallbacks.clear()\n\n    // reset all requests and callbacks\n    if (!this.isDisposed) {\n      this.connect()\n    }\n  }\n\n  private connect() {\n    if (this.connection && !this.connection.isPending) {\n      // tslint:disable-next-line\n      this.connection.then($ => $.close())\n    }\n\n    if (!this.connection || !this.connection.isPending) {\n      this.connection = future<T>()\n    }\n\n    this.lastChunk = ''\n\n    let ctor = this.options.WebSocketConstructor || (typeof WebSocket !== 'undefined' ? WebSocket : void 0)\n\n    if (!ctor) {\n      throw new Error('Please provide a WebSocketConstructor')\n    }\n\n    const connection = new ctor(this.url, this.options.protocol)\n\n    connection.onopen = () => {\n      this.connection.resolve(connection)\n    }\n\n    connection.onerror = error => {\n      this.timeout(error)\n    }\n\n    connection.onclose = event => {\n      this.timeout(new Error(`Connection closed (${(event && event.reason) || 'Unknown reason'})`))\n    }\n\n    // LISTEN FOR CONNECTION RESPONSES\n    connection.onmessage = e => {\n      let data = typeof e.data === 'string' ? e.data : ''\n\n      /* istanbul ignore if */\n      // tslint:disable-next-line:no-console\n      if (this.debug) console.log('RECV << ' + e.data)\n\n      this.parseResponse(data).forEach(result => {\n        // get the id which matches the returned id\n        if (result instanceof Array) {\n          result.forEach($ => this.processMessage($))\n        } else {\n          this.processMessage(result)\n        }\n      })\n    }\n  }\n}\n\nexport default WebSocketProvider\n"],"names":["toRPC","message","jsonrpc","id","Math","floor","Error","JSON","stringify","method","trim","length","params","future","resolver","rejecter","promise","Promise","ok","err","x","isPending","catch","e","reject","resolve","finally","fn","then","Object","defineProperty","exports","value","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","r","charCodeAt","slice","compare","y","b","xc","c","yc","k","l","intCheck","min","max","name","isArray","obj","prototype","toString","call","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","caseChanged","isNum","this","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","c0","ne","maxOrMin","args","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","p","v","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","module","self","window","root","byteArray","byteCount","byteIndex","stringFromCharCode","String","fromCharCode","ucs2decode","string","extra","output","counter","checkScalarValue","codePoint","createByte","shift","encodeCodePoint","symbol","readContinuationByte","continuationByte","decodeSymbol","byte1","version","encode","codePoints","index","byteString","decode","tmp","array","ucs2encode","global","defaultSetTimout","defaultClearTimeout","cachedSetTimeout","cachedClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","apply","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","performance","performanceNow","now","mozNow","msNow","oNow","webkitNow","Date","getTime","startTime","nextTick","Array","title","browser","env","argv","versions","binding","cwd","chdir","dir","umask","hrtime","previousTimestamp","clocktime","seconds","nanoseconds","platform","release","uptime","INPUT_ERROR","WINDOW","JS_SHA3_NO_WINDOW","WEB_WORKER","JS_SHA3_NO_NODE_JS","process","node","COMMON_JS","JS_SHA3_NO_COMMON_JS","ARRAY_BUFFER","JS_SHA3_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","CSHAKE_PADDING","SHIFT","RC","BITS","SHAKE_BITS","OUTPUT_TYPES","CSHAKE_BYTEPAD","128","256","JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW","isView","buffer","createOutputMethod","bits","padding","outputType","Keccak","update","createShakeOutputMethod","outputBits","createCshakeOutputMethod","methods","createKmacOutputMethod","key","createOutputMethods","createMethod","type","create","algorithms","w","bytepad","Kmac","methodNames","algorithm","methodName","newMethodName","blocks","reset","finalized","block","start","blockCount","outputBlocks","extraBytes","notString","Uint8Array","code","lastByteIndex","f","right","o","bytes","unshift","encodeString","strs","paddingBytes","zeros","finalize","hex","arrayBuffer","digest","offset","h","c1","c2","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49","hexToBytes","result","char","parseInt","sha3","options","encoding","mutValue","keccak256","utf8.encode","unitMap","noether","wei","kwei","Kwei","babbage","femtoether","mwei","Mwei","lovelace","picoether","gwei","Gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","mether","gether","tether","padLeft","chars","join","padRight","toUtf8","utf8.decode","fromUtf8","_str","allowZero","transformToFullName","json","typeName","inputs","map","extractDisplayName","stBracket","endBracket","extractTypeName","toNullDecimal","toBigNumber","toDecimal","toData","val","startsWith","toHex","toBoolean","fromDecimal","num","isBoolean","isString","valStr","getValueOfUnit","_unit","unit","unitValue","undefined","_num","toTwosComplement","bigNumber","isStrictAddress","address","isAddress","isChecksumAddress","_address","addressHash","toArray","toAddress","object","isObject","TransactionStatus","TransactionType","BigNumberRoundingMode","toPayload","messageId","isValidResponse","response","every","validateSingleMessage","error","ETH_BIGNUMBER_ROUNDING_MODE","outputBigNumberFormatter","utils.toBigNumber","inputDefaultBlockNumberFormatter","blockNumber","inputBlockNumberFormatter","isPredefinedBlockNumber","utils.toHex","inputCallFormatter","from","inputAddressFormatter","to","filter","forEach","utils.fromDecimal","data","inputTransactionFormatter","outputTransactionFormatter","tx","utils.toDecimal","transactionIndex","nonce","gas","gasPrice","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","utils.isArray","logs","log","outputLogFormatter","status","outputBlockFormatter","gasLimit","size","timestamp","number","difficulty","totalDifficulty","transactions","item","utils.isString","logIndex","utils.isStrictAddress","utils.isAddress","outputSyncingFormatter","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","Method","[object Object]","callName","inputFormatter","outputFormatter","requestManager","given","expected","formatter","formatInput","validateArgs","payload","sendAsync","formatOutput","Property","getter","eth","sleep","ms","formatters.inputAddressFormatter","formatters.inputDefaultBlockNumberFormatter","formatters.outputBigNumberFormatter","utils.toData","formatters.inputBlockNumberFormatter","formatters.outputBlockFormatter","formatters.outputTransactionFormatter","formatters.outputTransactionReceiptFormatter","formatters.inputTransactionFormatter","formatters.inputCallFormatter","utils.toBoolean","utils.toArray","utils.toAddress","formatters.outputSyncingFormatter","utils.toString","utils.toNullDecimal","inject","target","propertyKey","execute","RequestManager","provider","Map","defer","requests","delete","InvalidResponse","txId","waitForCompletion","isFailure","retriesOnEmpty","isTxDropped","getTransactionAndReceipt","failed","confirmed","hash","currentNonce","account","eth_accounts","eth_getTransactionCount","eth_getTransactionByHash","replaced","queued","pending","eth_getTransactionReceipt","reverted","_retryAttemps","retryAttemps","all","__decorate","SolidityParam","isDynamic","utils.padLeft","utils.toTwosComplement","offsetAsBytes","staticPart","dynamicPart","formatInputInt","config.ETH_BIGNUMBER_ROUNDING_MODE","formatInputBytes","utils.padRight","formatInputDynamicBytes","formatInputString","utils.fromUtf8","formatInputBool","formatInputReal","formatOutputInt","param","signedIsNegative","formatOutputUInt","formatOutputReal","formatOutputUReal","formatOutputBool","formatOutputBytes","matches","match","formatOutputDynamicBytes","formatOutputString","utils.toUtf8","formatOutputAddress","SolidityType","_inputFormatter","_outputFormatter","nestedTypes","reduce","previous","current","_","isDynamicArray","nestedName","f.formatInputInt","isStaticArray","staticArrayLength","arrayOffset","arrayStart","nestedStaticPartLength","staticPartLength","roundedNestedStaticPartLength","isDynamicType","dynamicOffset","roundedLength","solidityType","coder","types","_types","isType","encodeParams","solidityTypes","getSolidityTypes","encodeds","acc","roundedStaticPartLength","encodeMultiWithOffset","_dynamicOffset","formatter.formatInputInt","encodeWithOffset","encoded","encodingMode","mode","previousLength","additionalOffset","decodeParams","offsets","getOffsets","lengths","_requireType","super","f.formatOutputAddress","f.formatInputBool","f.formatOutputBool","f.formatOutputInt","f.formatOutputUInt","f.formatInputDynamicBytes","f.formatOutputDynamicBytes","f.formatInputBytes","f.formatOutputBytes","f.formatInputString","f.formatOutputString","f.formatInputReal","f.formatOutputReal","f.formatOutputUReal","SolidityFunction","_inputTypes","_outputTypes","outputs","_constant","constant","_payable","payable","needsToBeTransaction","stateMutability","_name","utils.transformToFullName","utils.isObject","some","$","inputArgs","utils.isBigNumber","signature","utils.sha3","encodedOutput","displayName","eth_sendTransaction","defaultBlock","extractDefaultBlock","eth_call","unpackOutput","eth_estimateGas","utils.extractDisplayName","utils.extractTypeName","contract","assign","estimateGas","bind","toTopic","strValue","AbstractFilter","callback","isDisposed","callbacks","isStarted","getNewFilter","filterId","stopSemaphore","poll","uninstall","getChanges","cb","console","EthFilter","topics","topic","fromBlock","toBlock","eth_getFilterLogs","eth_newFilter","eth_getFilterChanges","eth_uninstallFilter","SolidityEvent","_params","_anonymous","anonymous","indexed","indexedTopics","encodeParam","indexedData","indexedParams","notIndexedData","notIndexedParams","formatters.outputLogFormatter","event","events","AllSolidityEvents","_requestManager","_json","eventTopic","filterOptions","allEvents","Contract","abi","transactionHash","attachToContract","addEventsToContract","encodeConstructorParams","input","last","async","receiptFuture","count","fetcher","blockHash","eth_getCode","contractAddress","checkForContractAddress","at","TypeError","arg","eth_newBlockFilter","eth_newPendingTransactionFilter","host","toSend","fetch","body","headers","Content-Type","debug","shh_getMessages","shh_newFilter","shh_getFilterChanges","shh_uninstallFilter","url","Set","connect","connection","close","didFinish","responseCallbacks","ws","send","returnValues","chunk","lastChunk","parse","lastChunkTimeout","get","notificationCallbacks","timeoutError","clear","ctor","WebSocketConstructor","WebSocket","protocol","onopen","onerror","onclose","reason","onmessage","parseResponse","processMessage","padEnd","returnValue","bloom","messages","checksumAddress"],"mappings":"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"}