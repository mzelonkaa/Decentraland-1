/// <reference types="@decentraland/web3-provider" />
/// <reference types="env" />
import * as eth from 'eth-connect';
import { Erc20 } from './erc20';
/**
 * Return Contract, Provider and RequestManager
 *
 * @param contractAddress Smartcontract ETH address
 */
export declare function getContract(contractAddress: eth.Address): Promise<{
    contract: Erc20;
    provider: import("@decentraland/web3-provider").Provider;
    requestManager: eth.RequestManager;
}>;
/**
 * Send token to an address
 *
 * @param contractAddress Smartcontract ETH address
 * @param toAddress Receiver address
 * @param amount Amount in ether to send
 * @param waitConfirm Resolve promise when tx is mined or not
 */
export declare function send(contractAddress: eth.Address, toAddress: eth.Address, amount: number, waitConfirm?: boolean): Promise<any>;
/**
 * Return true if the address is allowed to spend more than 1M token
 *
 * @param contractAddress Address of the token smartcontract
 * @param owner Address holding the token
 * @param spender Address spending the token
 */
export declare function isApproved(contractAddress: eth.Address, owner: eth.Address, spender: eth.Address): Promise<boolean>;
/**
 * Send a transaction to approve another address to move ERC20
 *
 * @param contractAddress Address of the token smartcontract
 * @param spender Address spending the token
 * @param waitConfirm Resolve promise when tx is mined or not
 * @param amount Amount to approve
 */
export declare function setApproval(contractAddress: eth.Address, spender: eth.Address, waitConfirm?: boolean, amount?: string): Promise<any>;
/**
 * Check how much the spender is allowed to move on behalf of the user
 *
 * @param contractAddress Address of the token smartcontract
 * @param spender Address spending the token
 * @param owner Address holding the token
 */
export declare function allowance(contractAddress: eth.Address, owner: eth.Address, spender: eth.Address): Promise<import("../utils/types").TransactionObject<string>>;
/**
 * Check the balance of an user
 *
 * @param contractAddress Address of the token smartcontract
 * @param address Address you are checking
 */
export declare function balance(contractAddress: eth.Address, address: eth.Address): Promise<import("../utils/types").TransactionObject<string>>;
