/// <reference types="env" />
import * as eth from 'eth-connect';
import { Profiles, Snapshots } from './types';
import { Rarity, rarityLevel, Wearable } from '../wearable/types';
/**
 * Returns profile of an address
 *
 * @param address ETH address
 */
export declare function getUserInfo(address?: eth.Address): Promise<Profiles>;
/**
 * Returns wearables inventory of an address
 *
 * @param address ETH address
 */
export declare function getUserInventory(address?: eth.Address): Promise<string[]>;
/**
 * Returns wearables inventory of an address with full data on each wearable
 *
 * @param address ETH address
 */
export declare function getUserFullInventory(address?: eth.Address): Promise<Wearable[]>;
/**
 * Returns boolean if the user has an item in their inventory or equiped
 *
 * @param wearable DCL name of the wearable ('dcl://dcl_launch/razor_blade_upper_body')
 * @param equiped true if currently wearing
 */
export declare function itemInInventory(wearable: string, equiped?: boolean): Promise<boolean>;
/**
 * Returns boolean if the user has one of the items in their inventory or equiped
 *
 * @param wearables List of DCL names of the wearable (['dcl://dcl_launch/razor_blade_upper_body'])
 * @param equiped true if currently wearing
 */
export declare function itemsInInventory(wearables: string[], equiped?: boolean): Promise<boolean>;
/**
 * Returns the equiped items
 */
export declare function equipedItems(): Promise<string[]>;
/**
 * Returns the rarity of the rarest item that the player has in their inventory or equiped
 *
 * @param equiped true if currently wearing
 */
export declare function rarestItem(equiped?: boolean): Promise<rarityLevel>;
export declare function updateRarity(rarity: Rarity): void;
/**
* Returns a Snapshots object, containing URLs to various snapshots of a player's face and full body
*
* @param playerID the ID of the player
*/
export declare function getPlayerSnapshots(playerId?: string): Promise<Snapshots | null>;
