/// <reference types="@decentraland/web3-provider" />
/// <reference types="env" />
import * as eth from 'eth-connect';
import { Erc721 } from './erc721';
/**
 * Return Contract, Provider and RequestManager
 *
 * @param contractAddress Smartcontract ETH address
 */
export declare function getContract(contractAddress: eth.Address): Promise<{
    contract: Erc721;
    provider: import("@decentraland/web3-provider").Provider;
    requestManager: eth.RequestManager;
}>;
/**
 * Transfer an ERC721 token
 *
 * @param contractAddress ERC721 smartcontract address
 * @param toAddress Receiver address
 * @param tokenId Token ID
 * @param waitConfirm Resolve promise when tx is mined or not
 */
export declare function transfer(contractAddress: eth.Address, toAddress: eth.Address, tokenId: number, waitConfirm?: boolean): Promise<any>;
/**
 * Set approval for ERC721
 *
 * @param contractAddress ERC721 smartcontract address
 * @param operator Address approved to move the tokens
 * @param approved Boolean for approval
 */
export declare function setApprovalForAll(contractAddress: eth.Address, operator: eth.Address, approved?: boolean): Promise<boolean>;
/**
 * Returns true if the operator is allowed to move the user tokens
 *
 * @param contractAddress ERC721 smartcontract address
 * @param assetHolder User address
 * @param operator Address approved to move the tokens
 */
export declare function isApprovedForAll(contractAddress: eth.Address, assetHolder: eth.Address, operator: eth.Address): Promise<boolean>;
/**
 * Returns true if the player owns at least one of the listed tokens from the indicated contract
 *
 * @param contractAddress ERC721 smartcontract address
 * @param tokenIds One or multiple token IDs to check player ownership
 */
export declare function checkTokens(contractAddress: eth.Address, tokenIds?: number | number[]): Promise<boolean>;
